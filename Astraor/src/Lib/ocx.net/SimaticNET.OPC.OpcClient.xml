<?xml version="1.0"?>
<doc>
    <assembly>
        "base"
    </assembly>
    <members>
        <member name="M:SimaticNET.OPC.OpcDaClient.ItemIdentifier.#ctor(System.String,System.String,System.Object)">
            <summary>
Initializes the object with the specified item path, item name and client handle.
</summary>
            <param name="itemID">The item's name (ItemID)</param>
            <param name="itemPath">The item path, in most cases this parameter will be empty.</param>
            <param name="handleClient">Used to identify the item by handle.</param>
        </member>
        <member name="M:SimaticNET.OPC.OpcDaClient.ItemIdentifier.#ctor(System.String,System.String)">
            <summary>
Initializes the object with the specified item path and item name.
</summary>
            <param name="itemID">The item's name (ItemID)</param>
            <param name="itemPath">The item path, in most cases this parameter will be empty.</param>
        </member>
        <member name="M:SimaticNET.OPC.OpcDaClient.ItemIdentifier.#ctor">
            <summary>
Initializes the object with default values.
</summary>
        </member>
        <member name="M:SimaticNET.OPC.OpcCmn.PkiCertificate.#ctor(System.String,System.String[],System.String[],System.Int32,System.String,System.String,System.String,System.String,System.String,System.String,System.Int32)">
Construction

<summary>
Internal constructor prevents construction outside of this assembly.
</summary></member>
        <member name="T:SimaticNET.OPC.OpcCmn.PkiCertificate">
            <summary>
Encapsulates a X509 certificate
</summary>
        </member>
        <member name="T:UaPkiCertificateCollection">
UaPkiCertificateCollection
*  OPC UA specific certificate collection.

</member>
        <member name="T:UaPkiCertificate.Extension">
Extensions Enumeration 
</member>
        <member name="T:UaPkiCertificateInfo">
OPC UA specific certificate information. 
</member>
        <member name="T:UaPkiRsaKeyPair">
UaPkiRsaKeyPair

</member>
        <member name="T:UaPkiPrivateKey">
Wrapper class for a private key

</member>
        <member name="T:UaPkiPublicKey.KeyType">
@brief KeyType Enumeration
</member>
        <member name="T:UaPkiPublicKey">
UaPkiPublicKey 
</member>
        <member name="T:UaPkiIdentity">
Identity for certificate issuer and subject.

</member>
        <member name="F:SimaticNET.OPC.OpcDaClient.DaServerMgt.m_ServerStateChanged">
Callback handling

</member>
        <member name="M:SimaticNET.OPC.OpcDaClient.DaServerMgt.HandleNullReference(System.String)">
Exception helpers

</member>
        <member name="M:SimaticNET.OPC.OpcDaClient.DaServerMgt.Dispose">
Construction

<summary>
Disconnects from the server id currently connected.
Releases all managed resources.
</summary></member>
        <member name="P:SimaticNET.OPC.OpcDaClient.DaServerMgt.ServerState">
The current server state

<summary>
Indicates the status of the connection between the API and the underlying OPC server.
</summary></member>
        <member name="P:SimaticNET.OPC.OpcDaClient.DaServerMgt.IsConnected">
whether the server is currently connected

<summary>
Indicates the actual connect status to the client API.
</summary></member>
        <member name="M:SimaticNET.OPC.OpcDaClient.DaServerMgt.GetProperties(SimaticNET.OPC.OpcDaClient.ItemIdentifier[]@,System.Int32[]@,System.Boolean,System.Boolean,SimaticNET.OPC.OpcDaClient.ItemProperties[]@)">
Get item properties

<summary>
Returns the requested properties for a list of items. 
</summary><param name="itemIdentifiers">The item identifiers, whose properties should be obtained.</param><param name="propertyIDs">The IDs of the requested properties.</param><param name="returnAllProperties">Indicates to return all properties.</param><param name="returnPropertyValues">Indicates to rreturn the values of the requested properties.</param><param name="itemProperties">The requested itemProperties.</param></member>
        <member name="M:SimaticNET.OPC.OpcDaClient.DaServerMgt.Browse(System.String,System.String,System.String@,System.Int32,SimaticNET.OPC.OpcDaClient.BrowseFilter,System.Int32[],System.Boolean,System.Boolean,SimaticNET.OPC.OpcDaClient.BrowseElement[]@,System.Boolean@)">
Browse OPC server adress space

<summary>
Browse OPC server adress space.
Using the Browse method the address space of an OPC Servers can be searched for tags, folders or both. 
</summary><param name="itemName">Specifies the element (branch) for which all child elements will be obtained. By passing an empty string the root level of the server will be browsed.</param><param name="itemPath">Is used to specify an ItemPath for the element to an OPC XML-DA Server. Ignored for COM servers</param><param name="continuationPoint">The string used to continue a browse that could not be completed.</param><param name="maxElementsReturned">The maximum elements which should be returned. If set to 0 all elements will be returned</param><param name="browseFilter">Filter on the type of elementsto be returned, e.g. all, branch, items.</param><param name="propertyIDs">The IDs of requested item properties (enum PropertyID will help to build the list).</param><param name="returnAllProperties">All properties will be returned in the associated BrowseElement.</param><param name="returnPropertyValues">The property values of the requested properties will be returned.</param><param name="browseElements">Contains all requested browse elements, that are all childs of itemName and match the browseFilter</param><param name="moreElements">Idicates that the server has more elements, Browse must be called again using the returned continuationPoint. Note: always true if the server does not support the continuationPoint mechanism.</param></member>
        <member name="M:SimaticNET.OPC.OpcDaClient.DaServerMgt.SubscriptionCancel(System.Int32)">
Cancel Subscription. 

<summary>
Cancel Subscription.
</summary><param name="serverSubscription">The server's index of the subscription as returned during Subscribe.</param></member>
        <member name="M:SimaticNET.OPC.OpcDaClient.DaServerMgt.SubscriptionRemoveItems(System.Int32,SimaticNET.OPC.OpcDaClient.ItemIdentifier[]@)">
Remove Items from existing Subscription. 

<summary>
Remove Items from an existing Subscription.
</summary><param name="serverSubscription">The server's index of the subscription as returned during Subscribe.</param><param name="itemIdentifiers">List of items to remove from the subscription.</param></member>
        <member name="M:SimaticNET.OPC.OpcDaClient.DaServerMgt.SubscriptionAddItems(System.Int32,SimaticNET.OPC.OpcDaClient.ItemIdentifier[]@)">
Add Items to existing Subscription. 

<summary>
Adds items to an existing Subscription.
</summary><param name="serverSubscription">The server's index of the subscription as returned during Subscribe.</param><param name="itemIdentifiers">The list of items to add to the subscription.</param></member>
        <member name="M:SimaticNET.OPC.OpcDaClient.DaServerMgt.SubscriptionModify(System.Int32,System.Single)">
/* Modify deadband of subscription. 

<summary>
Modifies the deadband of subscription.
</summary><param name="serverSubscription">The server's index of the subscription as returned during Subscribe</param><param name="deadband">The percent change in an item value that will cause a notification for that value (must be between 0 and 100).</param></member>
        <member name="M:SimaticNET.OPC.OpcDaClient.DaServerMgt.SubscriptionModify(System.Int32,System.Int32,System.Int32@)">
/* Modify update rate of subscription. 

<summary>
Modifies the update rate of a subscription.
</summary><param name="serverSubscription">The server's index of the subscription as returned during Subscribe</param><param name="updateRate">Requested update rate for notifications (in ms).</param><param name="revisedUpdateRate">The revised update rate from the server.</param></member>
        <member name="M:SimaticNET.OPC.OpcDaClient.DaServerMgt.SubscriptionModify(System.Int32,System.Boolean)">
/* Modify active state of subscription. 

<summary>
Modifies the active state of a subscription.
</summary><param name="serverSubscription">Unique identifier of the subscription, received from Subscribe.</param><param name="active">Sets the subscription active (true) or inactive (false).</param></member>
        <member name="M:SimaticNET.OPC.OpcDaClient.DaServerMgt.SubscriptionModify(System.Int32,System.Boolean,System.Int32,System.Int32@,System.Single)">
Modify active state of subscription. 

<summary>
Modifies an existing subscription.
</summary><param name="serverSubscription">Unique identifier of the subscription, returned during Subscribe method.</param><param name="active">Set the subscription active. Pass 'null' to remain unchanged.</param><param name="updateRate">Requested update rate in ms.</param><param name="revisedUpdateRate">The revised update rate from the server.</param><param name="deadband">The percent change in an item value that will cause a notification for that value (must be between 0 and 100).</param></member>
        <member name="M:SimaticNET.OPC.OpcDaClient.DaServerMgt.Subscribe(System.Int32,System.Boolean,System.Int32,System.Int32@,System.Single,SimaticNET.OPC.OpcDaClient.ItemIdentifier[]@,System.Int32@)">
Subscribe items to receive data changes from the OPC server. 

<summary>
Subscribe items to receive data changes from the OPC server.
</summary><param name="clientSubscription">Identification number to identify the DataChanged notification related to this subscription.</param><param name="active">Creates an active subscription.</param><param name="updateRate">The requested rate (in ms) at which notifications will be sent.</param><param name="revisedUpdateRate">The revised update rate from the server.</param><param name="deadband">The percent change in an item value that will cause a notification for that value (must be between 0 and 100).</param><param name="itemIdentifiers">The items to add to the subscription.</param><param name="serverSubscription">This index is used to modify or cancel the subscription.</param></member>
        <member name="E:SimaticNET.OPC.OpcDaClient.DaServerMgt.WriteCompleted">
            <summary>
Event is fired when there is a write completed callback.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcDaClient.DaServerMgt.WriteCompletedEventHandler">
            <summary>
The write complete delegate.
</summary>
            <param name="transactionHandle"> Identification number to identify the WriteAsync call that caused the event.</param>
            <param name="noErrors"> Indicates if there are errors in the ItemResultCallback array. If the value of noError is ‘false’, the ResultID property within the ItemResultCallback must be checked.</param>
            <param name="itemResults"> Contains ResultID and ClientHandle for all items of the related WriteAsync call.</param>
        </member>
        <member name="E:SimaticNET.OPC.OpcDaClient.DaServerMgt.ReadCompleted">
            <summary>
Event fired when there is a read completed callback.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcDaClient.DaServerMgt.ReadCompletedEventHandler">
            <summary>
The read completed delegate.
</summary>
            <param name="transactionHandle"> Identification number to identify the ReadAsync call that caused the event.</param>
            <param name="allQualitiesGood"> Indicates if there are values with bad quality in the ItemValueCallback array.</param>
            <param name="noErrors"> Indicates if there are errors in the ItemValueCallback array. If the value of noError is ‘false’, the ResultID property within the ItemValueCallback must be checked.</param>
            <param name="itemValues"> Contains Value, Quality and Timestamp for every read item.</param>
        </member>
        <member name="E:SimaticNET.OPC.OpcDaClient.DaServerMgt.ServerStateChanged">
            <summary>
Event is fired when the server's state has changed.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcDaClient.DaServerMgt.ServerStateChangedEventHandler">
            <summary>
The server state changed delegate.
</summary>
            <param name="clientHandle"> Identification number to identify the related server connection.</param>
            <param name="state"> The new state of the server.</param>
        </member>
        <member name="E:SimaticNET.OPC.OpcDaClient.DaServerMgt.DataChanged">
            <summary>
Event is fired when there is a data change callback.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcDaClient.DaServerMgt.DataChangedEventHandler">
            <summary>
The data changed delegate.
</summary>
            <param name="clientSubscription"> Identification number to identify the subscription that fired the event.</param>
            <param name="allQualitiesGood"> Indicates if there are values with bad quality in the ItemValueCallback array.</param>
            <param name="noErrors"> Indicates if there are errors in the ItemValueCallback array. If the value of noError is ‘false’, the ResultID property within the ItemValueCallback must be checked.</param>
            <param name="itemValues"> Contains Value, Quality and Timestamp for every changed item.</param>
        </member>
        <member name="M:SimaticNET.OPC.OpcDaClient.DaServerMgt.WriteAsync(System.Int32,SimaticNET.OPC.OpcDaClient.ItemIdentifier[]@,SimaticNET.OPC.OpcDaClient.ItemValue[])">
Writes item values asynchronous to OPC server

<summary>
Writes item values asynchronously to OPC server. The success will be returned in the WriteCompleted event.
</summary><param name="transactionHandle">Identification number that will be returned in the WriteCompleted event to identify the corresponding WriteAsync call.</param><param name="itemIdentifiers">The identifiers of the items to write.</param><param name="itemValues">The values that should be written to the items.</param></member>
        <member name="M:SimaticNET.OPC.OpcDaClient.DaServerMgt.ReadAsync(System.Int32,System.Int32,SimaticNET.OPC.OpcDaClient.ItemIdentifier[]@)">
Writes item values asynchronous to OPC server

<summary>
Reads item values asynchronously from the OPC server. The values will be returned in the ReadCompleted event.
</summary><param name="transactionHandle">Identification number that will be returned in the ReadCompleted event to identify the corresponding ReadAsync call.</param><param name="maxAge">The maximum age of the value in ms.</param><param name="itemIdentifiers">The identifiers of the items to read.</param></member>
        <member name="M:SimaticNET.OPC.OpcDaClient.DaServerMgt.Write(SimaticNET.OPC.OpcDaClient.ItemIdentifier[]@,SimaticNET.OPC.OpcDaClient.ItemValue[])">
Writes item values synchronous to OPC server

<summary>
Writes item values synchronously to OPC server.
</summary><param name="itemIdentifiers">The identifiers of the items to write.</param><param name="itemValues">The values to write to the items.</param></member>
        <member name="M:SimaticNET.OPC.OpcDaClient.DaServerMgt.Read(System.Int32,SimaticNET.OPC.OpcDaClient.ItemIdentifier[]@,SimaticNET.OPC.OpcDaClient.ItemValue[]@)">
Reads item values synchronous from OPC server. 

<summary>
Reads item values synchronous from OPC server.
</summary><param name="maxAge">The maximum age of the value in ms</param><param name="itemIdentifiers">The identifiers of the items to read.</param><param name="itemValues">The values of the items.</param><returns /></member>
        <member name="M:SimaticNET.OPC.OpcDaClient.DaServerMgt.Disconnect">
Disconnects from OPC server

<summary>
Disconnect from the OPC server. All subscriptions and resources will be freed.
</summary></member>
        <member name="M:SimaticNET.OPC.OpcDaClient.DaServerMgt.Connect(System.String,System.Int32,SimaticNET.OPC.OpcDaClient.ConnectInfo@,System.Boolean@)">
Connects to the Opc server

<summary>
Establishes the connection to the Server.
</summary><param name="url">The complete url of the OPC server(opcda://[Hostname/][ProgID]/[ClsID]).</param><param name="clientHandle">Client can pass an index for this specific server object for future identification.</param><param name="connectInfo">Contains connection information.</param><param name="connectFailed">Indicates that the initial connect failed.</param></member>
        <member name="M:SimaticNET.OPC.OpcDaClient.DaServerMgt.#ctor">
Construction

<summary>
A .NET managment class to handle all interactions with an OPC DA Server.
</summary></member>
        <member name="T:SimaticNET.OPC.OpcDaClient.DaServerMgt">
            <summary>
The class DaServerMgt allows the access to an OPC Data Access Server.
</summary>
        </member>
        <member name="M:SimaticNET.OPC.OpcDaClient.HandleManager.#ctor">
Constructor ******************
</member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ConnectInfo.CertificateStoreLocation">
            <summary>
The CertificateStoreLocation used for the validation of the certificates. Only applies for UA Servers with security and is ignored for other types of servers.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ConnectInfo.UserIdentity">
            <summary>
The UserIdentityToken. Defines which kind of authtication is used for the connection.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ConnectInfo.ClientName">
            <summary>
The Name of the client used to for diagnostic purpose on the server side.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ConnectInfo.CertificateStoreName">
            <summary>
The CertificateStoreName used for the validation of the certificates. Only applies for UA Servers with security and is ignored for other types of servers.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ConnectInfo.ClientPrivateKey">
            <summary>
The ClientPrivateKey used for the connection. Only applies for UA Servers when using security.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ConnectInfo.ClientCertificate">
            <summary>
The ClientCertificate used for the connection. Only applies for UA Servers when using security.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ConnectInfo.ServerCertificate">
            <summary>
The ServerCertificate used for the connection. Only applies for UA Servers when using security.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ConnectInfo.MessageSecurityMode">
            <summary>
The MessageSecurityMode used for the connection. Only applies for UA Servers and is ignored for other types of servers.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ConnectInfo.SecurityPolicyUri">
            <summary>
The SecurityPolicy used for the connection. Only applies for UA Servers and is ignored for other types of servers.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ConnectInfo.DoServerCertificateVerify">
            <summary>
If this flag is set the API will try to validate the server certificate when connecting with security.
If the application handles the certificate management this flag can be set to false to disable the check.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ConnectInfo.RetryAfterConnectionError">
            <summary>
If this flag is set the API will reconnect after connection loss until the connect succeeds. If the connection could be reestablished the group handles – created before interruption – will be valid again. The event handler methods are remaining also subscribed to the events.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ConnectInfo.RetryInitialConnection">
            <summary>
If this flag is set the API will try to connect to the server even when the first connect did not succeeded.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ConnectInfo.KeepAliveTime">
            <summary>
The keep alive time in milliseconds.
During runtime the OPC client API permanently checks the availability and the connection to the server.
KeepAliveTime represents the time interval in milliseconds, after which a validation takes place.
The reconnect interval starts with two times KeepAliveTime and will be incremented up to 10 times KeepAliveTime if the server is not available for a longer time period.
The default value is 10000 ms.
The reconnect interval after a shutdown event form the OPC server is one minute.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ConnectInfo.LocalId">
            <summary>
The locale name in the format "[languagecode]-[country/regioncode]", where languagecode is the two letter ISO 639 code for a language, country/regioncode is the two letter ISO 3166 code for the country/region.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ConnectInfo.BrowseInterfaceSelection">
            <summary>
The type of browse interface that should be used for browse. This setting allows to force OPC Data Access 2 browsing even if OPC Data Access 3 browsing is allowed.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ConnectInfo.DefaultNamespaceUri">
            <summary>
For items from the default namespace the OPCDA ItemId will be the same as the string UANodeId.
</summary>
        </member>
        <member name="M:SimaticNET.OPC.OpcDaClient.ConnectInfo.#ctor">
            <summary>
Initializes an ConnectInfo instance with default values.
</summary>
        </member>
        <member name="M:SimaticNET.OPC.OpcDaClient.ConnectInfo.#ctor(System.String,System.Boolean,System.Boolean,System.Int32)">
            <summary>
Initializes an ConnectInfo instance with the given values.
</summary>
            <param name="localID">The locale name in the format "[languagecode]-[country/regioncode]".&gt;]</param>
            <param name="retryInitialConnection">Try to connect even when the initial connection failed.</param>
            <param name="retryAfterConnectionError">Try to reconnect after connection was lost.</param>
            <param name="keepAliveTime">The keep alive time in milliseconds.</param>
        </member>
        <member name="T:SimaticNET.OPC.OpcDaClient.ConnectInfo">
            <summary>
Contains connection information.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcDaClient.BrowseInterface">
            <summary>
The type of browse interface that should be used for browse.
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcDaClient.BrowseInterface.ComDA3">
            <summary>
Browse functionality of OPC Data Access 3.
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcDaClient.BrowseInterface.ComDA2">
            <summary>
Browse functionality of OPC Data Access 2.
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcDaClient.BrowseInterface.Default">
            <summary>
Default browse functionality for the selected OPC protocol.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.UserIdentityTokenIssuedToken.EncryptionAlgorithm">
            <summary>
The encryption algorithm used to encrypt the token data. If the string is empty the token data is not encrypted.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.UserIdentityTokenIssuedToken.TokenData">
            <summary>
The XML representation of the token encoded to a byte string. This token may be encrypted with the server certificate.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcDaClient.UserIdentityTokenIssuedToken">
            <summary>
UserIdentityToken for authentication based on an WS-Security compliant token e.g. Kerberos token.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.UserIdentityTokenCertificate.PrivateKey">
            <summary>
The private key for the X509 certificate in PEM format.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.UserIdentityTokenCertificate.Certificate">
            <summary>
The X509 certificate in DER format.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcDaClient.UserIdentityTokenCertificate">
            <summary>
An UserIdentityToken to pass an X509v3 certificate for user authentication.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.UserIdentityTokenUserPassword.Password">
            <summary>
The password to use for authentication.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.UserIdentityTokenUserPassword.UserName">
            <summary>
The username to use for authentication.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcDaClient.UserIdentityTokenUserPassword">
            <summary>
UserIdentityToken for Username password authentication.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.UserIdentityToken.TokenType">
            <summary>
Get the type of user identity token.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcDaClient.UserIdentityToken">
            <summary>
The base class for user identity tokens.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcDaClient.UserTokenType">
            <summary>
The type of IdentityToken to authenticate the user when connecting to the server.
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcDaClient.UserTokenType.IssuedToken">
            <summary>
Authenticate with an issued token e.g. a Kerberos token.
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcDaClient.UserTokenType.Certificate">
            <summary>
Authenticate with a user certificate.
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcDaClient.UserTokenType.UserName">
            <summary>
Authenticate with username and password.
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcDaClient.UserTokenType.Anonymous">
            <summary>
No user authentication.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcDaClient.ServerState">
            <summary>
The Enumerator ServerState is passed in the StateChange event and includes information on the actual status of the Server.
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcDaClient.ServerState.CONNECTED">
            <summary>
The connection to the OPC Server is established.
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcDaClient.ServerState.ERRORWATCHDOG">
            <summary>
The client API has notified a connection error to OPC Server. 
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcDaClient.ServerState.ERRORSHUTDOWN">
            <summary>
The OPC Server has fired a shutdown event.
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcDaClient.ServerState.DISCONNECTED">
            <summary>
There is no connection to the OPC Server.
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcDaClient.ServerState.UNDEFINED">
            <summary>
The OPC Server returned a status that is unknown to the Client API.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.BrowseElement.ItemProperties">
            <summary>
The set of properties for the element.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.BrowseElement.HasChildren">
            <summary>
Indicates whether the element has children.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.BrowseElement.IsItem">
            <summary>
Indicates whether the element refers to an item with data that can be accessed.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.BrowseElement.ItemPath">
            <summary>
An secondary identifier for the element within the server namespace.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.BrowseElement.ItemName">
            <summary>
The primary identifier for the element within the server namespace (ItemID).
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.BrowseElement.Name">
            <summary>
A descriptive name for element that is unique within a branch. Typically this name is used for displaying the address space in a tree or other structured format.
</summary>
        </member>
        <member name="M:SimaticNET.OPC.OpcDaClient.BrowseElement.#ctor">
            <summary>
Internal constructor prevents construction outside of this assembly.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcDaClient.BrowseElement">
            <summary>
Contains a description of an element in the server address space.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcDaClient.BrowseFilter">
            <summary>
The type of browse elements that should be returned during a browse.
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcDaClient.BrowseFilter.ITEM">
            <summary>
Return only elements that represent items.
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcDaClient.BrowseFilter.BRANCH">
            <summary>
Return only elements that contain other elements.
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcDaClient.BrowseFilter.ALL">
            <summary>
Return all types of browse elements.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ItemProperties.RequestedItemProperties">
            <summary>
Array of objects of class ItemProperty. This array contains all requested properties of an OPC Item (no matter if they were requested by GetProperties or Browse).
</summary>
        </member>
        <member name="M:SimaticNET.OPC.OpcDaClient.ItemProperties.#ctor(System.Int32)">
Constructor ******************
<summary>
Internal constructor prevents construction outside of this assembly.
</summary></member>
        <member name="T:SimaticNET.OPC.OpcDaClient.ItemProperties">
            <summary>
A list of properties for a single item.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ItemProperty.ResultID">
            <summary>
If an error was occurred while obtaining the properties, the dedicated error code will be returned within this property.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ItemProperty.PropertyID">
            <summary>
The identification number of the property.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ItemProperty.DataType">
            <summary>
The value’s data type of the property.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ItemProperty.ItemPath">
            <summary>
If the OPC Server supports reading and writing of properties through an item, here the ItemPath of this property will be returned.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ItemProperty.ItemName">
            <summary>
If the OPC Server supports reading and writing of properties through an item, here the ItemName of this property will be returned.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ItemProperty.Value">
            <summary>
The value of the property.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ItemProperty.Description">
            <summary>
The description of the property. This information can be used when displaying the property in a graphical user interface (e.g. in a Grid Control or a ToolTip).
</summary>
        </member>
        <member name="M:SimaticNET.OPC.OpcDaClient.ItemProperty.#ctor">
Constructor ******************
<summary>
Internal constructor prevents construction outside of this assembly.
</summary></member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ItemResultCallback.ResultID">
            <summary>
Returns item specific errors. The class ResultID provides the error code (int), the name (string) and a language dependant description (string).
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ItemResultCallback.ClientHandle">
            <summary>
The ClientHandle passed during WriteAsync is returned. The ClientHandle enables the Client to uniquely assign the returned value.
</summary>
        </member>
        <member name="M:SimaticNET.OPC.OpcDaClient.ItemResultCallback.#ctor">
            <summary>
Internal constructor prevents construction outside of this assembly.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcDaClient.ItemResultCallback">
            <summary>
The class ItemResultCallback is used in the WriteCompleted callback and contains properties for identifying items and possible errors.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ItemValueCallback.ResultID">
            <summary>
Returns item specific errors. The class ResultID provides the error code (int), the name (string) and a language dependant description (string).
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ItemValueCallback.ClientHandle">
            <summary>
The ClientHandle passed during Subscribe is returned. The ClientHandle enables the Client to uniquely assign the returned value.
</summary>
        </member>
        <member name="M:SimaticNET.OPC.OpcDaClient.ItemValueCallback.#ctor">
            <summary>
Internal constructor prevents construction outside of this assembly.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcDaClient.ItemValueCallback">
            <summary>
The class ItemValueCallback is derived from class ItemValue and - in addition to the description of ItemValue - contains properties required for callback operation.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ItemValue.TimeStamp">
            <summary>
The time stamp of the associated Value, which represets the time the Server took the last snapshot of the value.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ItemValue.Quality">
            <summary>
The quality of the associated Value. The class QualityID provides the quality code (int), the name (string) and the description (string).
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ItemValue.Value">
            <summary>
The value that was read respectively that should be written. Having the property Value of type object, it can accommodate any data type or it can contain any data type. Typically the Value will be of the same type as requested by the corresponding ItemIdentifier.
</summary>
        </member>
        <member name="M:SimaticNET.OPC.OpcDaClient.ItemValue.#ctor">
            <summary>
Internal constructor prevents construction outside of this assembly.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcDaClient.ItemValue">
The argument passed to a ResourceEvent
<summary>
The class ItemValue is used for the Read and Write methods. When reading it contains the value, the quality and the timestamp. When writing, only the value can be assigned.
When calling the Read method the ItemValue array is an out-parameter that means the object will be created completely by .NET OPC API.
When calling the Write method the ItemValue array together with the dedicated ItemIdentifier array must be created and must be filled with the values to write by the client.
</summary></member>
        <member name="P:SimaticNET.OPC.OpcDaClient.QualityID.IsGood">
            <summary>
Indicates if QualityID contains the “good” code for a value or not, without checking the code itself.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.QualityID.Description">
            <summary>
Contains the description of the quality code, language depends on the locale.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.QualityID.Name">
            <summary>
Contains the string-representation of the code.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.QualityID.VendorBits">
            <summary>
Contains the vendor specific part within the code transferred by the server.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.QualityID.LimitBits">
            <summary>
Contains the limit portion only, within the transferred code.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.QualityID.Quality">
            <summary>
Contains the code that describes the quality of the transferred value.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.QualityID.FullCode">
            <summary>
Contains the full code transferred by the server.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcDaClient.QualityID">
            <summary>
The class QualityID contains all information regarding the quality code send by the server.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ItemIdentifier.ResultID">
            <summary>
The error id for the result of an operation on an item. Whenever an Item-Error occurs during an OPC call (e.g. unknown ItemName, trying to write readOnly Items, etc.) the error code will be stored in this object of the associated ItemIdentifier. 
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ItemIdentifier.DataType">
            <summary>
The requested .NET data type for the item.
Could be changed by the server if a conversion is not possible. If this property is not set, the native (canonical) data type of the item in the OPC Server will be provided. In this case the .NET OPC API sets the data type during the first use of the instance ItemIdentifier.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ItemIdentifier.ClientHandle">
            <summary>
A unique item identifier assigned by the client. The ClientHandle will be returned together with the value of this Item in the DataChange event. Because ClientHandle being of type object, any .NET-Type can be used here, e.g. a TextBox Control or an object that contains information about further processing of the data. In the DataChanged event handler the ClientHandle can identify the associated object within the application.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ItemIdentifier.ServerHandle">
            <summary>
A unique item identifier assigned by the server.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ItemIdentifier.ItemPath">
            <summary>
When accessing OPC XML-DA Servers here the optional ItemPath can be defined. When accessing COM OPC Data Access Servers this property will be ignored.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ItemIdentifier.ItemName">
            <summary>
Contains the item’s name (ItemID) of an OPC Data Access Item.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcDaClient.ItemIdentifier">
            <summary>
The class is used for identification of OPC Items. Instances of this class are passed to all methods as ref-parameter (in/out). When using the same item frequently, this information is used to optimize OPC function calls. For this reason the objects should be reused for Read and Write actions and not being reinitialized for every single call.
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcCmn.OpcServerEnum.m_AscCmnClient">
Wrapped c++ object

</member>
        <member name="M:SimaticNET.OPC.OpcCmn.OpcServerEnum.HandleNullReference(System.String)">
Exception helpers

</member>
        <member name="M:SimaticNET.OPC.OpcCmn.OpcServerEnum.Dispose">
Destructor

</member>
        <member name="M:SimaticNET.OPC.OpcCmn.OpcServerEnum.CheckTrace">
 Tracing

</member>
        <member name="M:SimaticNET.OPC.OpcCmn.OpcServerEnum.getEndpoints(System.String,SimaticNET.OPC.OpcCmn.EndpointIdentifier[]@)">
Get a list of Endpoints from the OPCUA server

</member>
        <member name="M:SimaticNET.OPC.OpcCmn.OpcServerEnum.getCertificateForEndpoint(System.String,System.String,System.Byte,System.Byte[]@)">
Get the server certificate from the server

<summary>
Get the ServerCertificate from the specified server.
</summary><param name="server">The definition of the server we want to get the certificate from</param></member>
        <member name="M:SimaticNET.OPC.OpcCmn.OpcServerEnum.ClsidFromProgId(System.String,System.String,System.String@)">
Get the CLSID for a give node name and ProgID

<summary>
Returns the CLSID of the given OPC Server.
</summary><param name="nodeName">The name or the IP address of the host where the CLSID should be obtained. (e.g. localhost, PCTest, 192.168.0.120, etc.)</param><param name="progId">The ProgID for which the associated CLSID should be fetched.</param><param name="clsid">The returned CLSID</param></member>
        <member name="M:SimaticNET.OPC.OpcCmn.OpcServerEnum.EnumComServer(System.String,System.Boolean,SimaticNET.OPC.OpcCmn.ServerCategory[],SimaticNET.OPC.OpcCmn.ServerIdentifier[]@)">
Enumerates the Com OPC servers for the given node name

<summary>
Obtains a list of COM Servers from a specific Node.
</summary><param name="nodeName">The name or the IP address of the host where OPC Servers should be located. (e.g. localhost, PCTest, 192.168.0.120, etc.)</param><param name="returnAllServers">This flag decides whether to return all OPC Server found on that particular machine or not. If this parameter is set true, the array serverCategories will be ignored.</param><param name="serverCategories">This parameter specifies which types of OPC Servers should be returned.</param><param name="servers">A list of ServerIdentifier objects. These objects contain the information that is needed for connection establishment with each of the Servers.</param></member>
        <member name="M:SimaticNET.OPC.OpcCmn.OpcServerEnum.#ctor">
Construction

<summary>
Internal constructor prevents construction outside of this assembly.
</summary></member>
        <member name="T:SimaticNET.OPC.OpcCmn.OpcServerEnum">
            <summary>
Provides all registered OPC Servers on a specific node.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcCmn.WinStoreLocation">
            <summary>
Using the enumerator WinStoreLocation the location for the windows certificate store can be specified.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.OPCException.ResultID">
            <summary>
ResultID property that contains all the information.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcDaClient.OPCException">
            <summary>
Used to raise an exception associated with a specified result code.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ResultID.Succeeded">
            <summary>
This property indicates if ResultID contains the code of a successful operation or not, without checking the code itself.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ResultID.Description">
            <summary>
The description of the error, language depends on the locale.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ResultID.Name">
            <summary>
Contains the string-representation of the code.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcDaClient.ResultID.Code">
            <summary>
Contains the code transferred by the server for the particular action.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcDaClient.ResultID">
            <summary>
Contains a unique identifier for a result code and the associated string-representation and a language (local) dependant description of the occurred error. ResultIDs are used to indicate Itemerrors and are also part of OPCExceptions.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcDaClient.ReturnCode">
            <summary>
The enumerator ReturnCode indicates the success of a function call. This enumerator is used by different methods and shows the occurrence of quality changes or errors.
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcDaClient.ReturnCode.UNSUPPORTEDUPDATERATE">
            <summary>
The requested update rate is not supported by the server.
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcDaClient.ReturnCode.ITEMERRORANDQUALITYBAD">
            <summary>
For at least one item an error was returned during operation AND at least one item (the same or a different one) the returned quality was not good.
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcDaClient.ReturnCode.QUALITYNOTGOOD">
            <summary>
For at least one item the returned quality was not good.
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcDaClient.ReturnCode.ITEMERROR">
            <summary>
For at least one item an error was returned during operation.
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcDaClient.ReturnCode.SUCCEEDED">
            <summary>
The function returned successfully.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcCmn.ServerIdentifier.Endpoint">
            <summary>
The EndpointIdentifier of a UA connection.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcCmn.ServerIdentifier.Category">
            <summary>
The OPC Category of the Server, e.g. OPC DA, OPC HDA, etc.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcCmn.ServerIdentifier.CLSID">
            <summary>
The CLSID of the OPC Server.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcCmn.ServerIdentifier.Url">
            <summary>
The complete URL of the OPC Server. This information is required for Connect method.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcCmn.ServerIdentifier.HostName">
            <summary>
The name of the host on which OPC Server was found.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcCmn.ServerIdentifier.ProgID">
            <summary>
The ProgID of the OPC Server.
</summary>
        </member>
        <member name="M:SimaticNET.OPC.OpcCmn.ServerIdentifier.#ctor(System.String,SimaticNET.OPC.OpcCmn.EndpointIdentifier)">
            <summary>
Constructor for UA Server.
</summary>
        </member>
        <member name="M:SimaticNET.OPC.OpcCmn.ServerIdentifier.#ctor(System.String,System.String,System.String,SimaticNET.OPC.OpcCmn.ServerCategory)">
            <summary>
Internal constructor prevents construction outside of this assembly.
</summary>
            <summary>
Internal constructor prevents construction outside of this assembly.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcCmn.ServerIdentifier">
            <summary>
Provides all data required to establish a connection to an OPC Server.
</summary>
        </member>
        <member name="M:SimaticNET.OPC.OpcCmn.EndpointIdentifier.ToString">
            <summary>
Override the ToString method for human readable output.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcCmn.EndpointIdentifier.ServerCertificate">
            <summary>
The ServerCertificate for the UA Endpoint.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcCmn.EndpointIdentifier.ApplicationName">
            <summary>
The OPC Category of the Server, e.g. OPC DA, OPC HDA, etc.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcCmn.EndpointIdentifier.ProductUri">
            <summary>
The ProductUri of the UA Endpoint.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcCmn.EndpointIdentifier.ApplicationUri">
            <summary>
The ApplicationUri of the UA Endpoint.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcCmn.EndpointIdentifier.EndpointUrl">
            <summary>
The Url of the Endpoint. Needed to connect to that Endpoint.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcCmn.EndpointIdentifier.MessageSecurityMode">
            <summary>
The MessageSecurityMode used for the UA connection.
</summary>
        </member>
        <member name="P:SimaticNET.OPC.OpcCmn.EndpointIdentifier.SecurityPolicyUri">
            <summary>
The SecurityPolicy used for the UA connection.
</summary>
        </member>
        <member name="M:SimaticNET.OPC.OpcCmn.EndpointIdentifier.#ctor">
            <summary>
Internal constructor prevents construction outside of this assembly.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcCmn.EndpointIdentifier">
            <summary>
Provides additional data required to establish a connection to an UA Endpoint.
</summary>
        </member>
        <member name="T:SimaticNET.OPC.OpcCmn.ServerCategory">
            <summary>
Using the enumerator ServerCategory the type of the OPC Servers can be specified.
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcCmn.ServerCategory.OPCUA">
            <summary>
Server supports the OPC Specification OPC Unified Architecture
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcCmn.ServerCategory.OPCXMLDA">
            <summary>
Server supports the OPC Specification OPC XML DA 1.01
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcCmn.ServerCategory.OPCHDA">
            <summary>
Server supports the OPC Specification OPC HDA 1.10
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcCmn.ServerCategory.OPCAE">
            <summary>
Server supports the OPC Specification OPC AE 1.10
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcCmn.ServerCategory.OPCDX">
            <summary>
Server supports the OPC Specification OPC DX 1.00
</summary>
        </member>
        <member name="F:SimaticNET.OPC.OpcCmn.ServerCategory.OPCDA">
            <summary>
Server supports the OPC Specification OPC DA 2.05A or OPC DA 3.00
</summary>
        </member>
        <member name="M:LibT.#ctor">
construction / destruction

</member>
        <member name="M:UaClientSdk.UaSubscriptionCallback.deleteMonitoredItemsComplete(System.UInt32!System.Runtime.CompilerServices.IsLong,UaStatus!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaStatusCodeArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaDiagnosticInfos!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Send deleteMonitoredItems results.
     * This is the callback function for calls to UaSubscription::beginDeleteMonitoredItems.

</member>
        <member name="M:UaClientSdk.UaSubscriptionCallback.setMonitoringModeComplete(System.UInt32!System.Runtime.CompilerServices.IsLong,UaStatus!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaStatusCodeArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaDiagnosticInfos!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Send setMonitoringMode results.
     * This is the callback function for calls to UaSubscription::beginSetMonitoringMode.

</member>
        <member name="M:UaClientSdk.UaSubscriptionCallback.modifyMonitoredItemsComplete(System.UInt32!System.Runtime.CompilerServices.IsLong,UaStatus!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaMonitoredItemModifyResults!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaDiagnosticInfos!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Send modifyMonitoredItems results.
     * This is the callback function for calls to UaSubscription::beginModifyMonitoredItems.

</member>
        <member name="M:UaClientSdk.UaSubscriptionCallback.createMonitoredItemsComplete(System.UInt32!System.Runtime.CompilerServices.IsLong,UaStatus!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaMonitoredItemCreateResults!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaDiagnosticInfos!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Send createMonitoredItems results.
     * This is the callback function for calls to UaSubscription::beginCreateMonitoredItems.

</member>
        <member name="M:UaClientSdk.UaSubscriptionCallback.newEvents(System.UInt32!System.Runtime.CompilerServices.IsLong,UaEventFieldLists*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Send new events.
    *
    * This callback function provides the event notification for a subscription.
    *
    * New events may arrive for monitored items before the creation of the monitored item is completed and the createMonitoredItems call
    * returns. The client application must be prepared for that and ClientHandles passed in to createMonitoredItems must be valid and usable
    * before createMonitoredItems returns.
    *
    * New events may also arrive after monitored items are deleted, sampling is turned off, or after the publishing is disabled.
    *
    * This callback is normally not called faster than configured in SubscriptionSettings::publishingInterval but this is controlled by the
    * OPC UA Server and not by the client SDK. If the number of notifications in one publishing interval exceeds the setting
    * SubscriptionSettings::maxNotificationsPerPublish, the OPC UA Server will send more than one Publish response and this newEvents may be
    * called more than one time in the publishingInterval.
    *
    * If no new events are available in a publishingInterval, no newEvents is called and a UaSubscriptionCallback::keepAlive callback may be called
    * depending on the settings in SubscriptionSettings::maxKeepAliveCount.
    *
    * The newEvents is called from a worker thread but it should not be blocked by the application since this will block other callbacks like dataChange
    * contained in the same Publish response and also blocks more Publish responses received for the same UaSubscription object. See the general description of
    * the callback class for more details on Publish response processing.

</member>
        <member name="M:UaClientSdk.UaSubscriptionCallback.dataChange(System.UInt32!System.Runtime.CompilerServices.IsLong,UaMonitoredItemNotifications!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaDiagnosticInfos!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Send changed data.
    *
    * This callback function provides the data notification for a subscription.
    *
    * Data changes may arrive for monitored items before the creation of the monitored item is completed and the createMonitoredItems call
    * returns. The client application must be prepared for that and ClientHandles passed in to createMonitoredItems must be valid and usable
    * before createMonitoredItems returns.
    *
    * Data changes may also arrive after monitored items are deleted, sampling is turned off, or after the publishing is disabled.
    *
    * This callback is normally not called faster than configured in SubscriptionSettings::publishingInterval but this is controlled by the
    * OPC UA Server and not by the client SDK. If the number of notifications in one publishing interval exceeds the setting
    * SubscriptionSettings::maxNotificationsPerPublish, the OPC UA Server will send more than one Publish response and this dataChange may be
    * called more than one time in the publishingInterval.
    *
    * If no new data is available in a publishingInterval, no dataChange is called and a UaSubscriptionCallback::keepAlive callback may be called
    * depending on the settings in SubscriptionSettings::maxKeepAliveCount.
    *
    * The dataChange is called from a worker thread but it should not be blocked by the application since this will block other callbacks like newEvents
    * contained in the same Publish response and also blocks more Publish responses received for the same UaSubscription object. See the general description of
    * the callback class for more details on Publish response processing.

</member>
        <member name="M:UaClientSdk.UaSubscriptionCallback.notificationsMissing(System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
\brief Informs the client about missing notification messages.
    *
    *  The client SDK monitors the sequence numbers of the received data and event notifications and reports
    *  gaps in the sequence numbers using this callback method. The client can use the UaSubscription::republish
    *  method to request the missing notifications.
    *
    * The notificationsMissing is called from a worker thread but it should not be blocked by the application since this will block other callbacks like dataChange
    * contained in the same Publish response and also blocks more Publish responses received for the same UaSubscription object. See the general description of
    * the callback class for more details on Publish response processing.

</member>
        <member name="M:UaClientSdk.UaSubscriptionCallback.keepAlive(System.UInt32!System.Runtime.CompilerServices.IsLong)">
\brief Send subscription keep alive.
    *
    * This callback function provides the keep alive messages sent by the server if no changed data or events are available.
    *
    * The frequency of calls to this callback function depends on the settings in SubscriptionSettings::maxKeepAliveCount and
    * the availability of data and events.

</member>
        <member name="M:UaClientSdk.UaSubscriptionCallback.subscriptionStatusChanged(System.UInt32!System.Runtime.CompilerServices.IsLong,UaStatus!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Send subscription state change.

      This callback function informs the client if the status of a subscription changes. This can happen after a connection error that
      lasted longer than the lifetime of the subscription. The lifetime is calculated from PublishingInterval x MaxKeepAliveCount x LifetimeCount.
      A client must create a new subscription to continue data or event monitoring if this callback indicates a bad status for the subscription.
      UaSession::deleteSubscription should be called even if the subscription is no longer valid in the server to clear
      the client side subscription object.

</member>
        <member name="T:UaClientSdk.UaSubscriptionCallback">
@ingroup UaClientLibrary
 \brief UaSubscriptionCallback defines the callback interface for the UaSubscription class.

 This callback interface needs to be implemented by the user of the UaSubscription class to receive
 data change, event and subscription status change callbacks from the Client SDK. The interface
 provides also a callback function for keep alive calls from the server. This function needs
 to be implemented only by users of the SDK interested in the keep alive callbacks. The status of the
 subscription is normally monitored by the SDK and changes are indicated by sending subscription status
 changed callbacks.

 In cases of Subscription errors the user of the SDK is responsible for creating a new subscription since
 the SDK does not keep the information to recreate the Subscription to not increase memory consumption.
 The necessary information needs to be kept also by the client application anyway. To duplicate this information
 in the SDK consumes too much memory.

 Callbacks from the SDK APIs are coming from different worker threads and not from the thread that was used to
 connect to the server. It is in the responsibility of the user of the client API to synchronize the
 data provided by the callbacks with a GUI main thread if this is necessary.

 Publish responses are processed in worker threads from a thread pool. A Publish response may trigger one or more
 callbacks including dataChange newEvents, notificationsMissing and keepAlive. The Publish responses are processed
 in the order they are received by the stack. For the UA TCP protocol this normally ensures that the sequence numbers
 are processed in order. The processing of a Publish response will not start if another Publish response for the same
 UaSubscription object is still processed and callbacks are not returned by the client application.

</member>
        <member name="M:UaClientSdk.UaSessionCallback.historyDeleteEventsComplete(System.UInt32!System.Runtime.CompilerServices.IsLong,UaStatus!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaHistoryUpdateResults!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaDiagnosticInfos!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Send historyDeleteEvents result.
     * This is the callback function for calls to UaSession::beginHistoryDeleteEvents.

</member>
        <member name="M:UaClientSdk.UaSessionCallback.historyUpdateEventsComplete(System.UInt32!System.Runtime.CompilerServices.IsLong,UaStatus!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaHistoryUpdateResults!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaDiagnosticInfos!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Send historyUpdateEvents result.
     * This is the callback function for calls to UaSession::beginHistoryUpdateEvents.

</member>
        <member name="M:UaClientSdk.UaSessionCallback.historyDeleteAtTimeComplete(System.UInt32!System.Runtime.CompilerServices.IsLong,UaStatus!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaHistoryUpdateResults!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaDiagnosticInfos!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Send historyDeleteAtTime result.
     * This is the callback function for calls to UaSession::beginHistoryDeleteAtTime.

</member>
        <member name="M:UaClientSdk.UaSessionCallback.historyDeleteRawModifiedComplete(System.UInt32!System.Runtime.CompilerServices.IsLong,UaStatus!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaHistoryUpdateResults!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaDiagnosticInfos!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Send historyDeleteRawModified result.
     * This is the callback function for calls to UaSession::beginHistoryDeleteRawModified.

</member>
        <member name="M:UaClientSdk.UaSessionCallback.historyUpdateDataComplete(System.UInt32!System.Runtime.CompilerServices.IsLong,UaStatus!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaHistoryUpdateResults!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaDiagnosticInfos!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Send historyUpdateData result.
     * This is the callback function for calls to UaSession::beginHistoryUpdateData.

</member>
        <member name="M:UaClientSdk.UaSessionCallback.historyReadEventComplete(System.UInt32!System.Runtime.CompilerServices.IsLong,UaStatus!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaObjectArray&lt;UaClientSdk.HistoryReadEventResult&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaDiagnosticInfos!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Send historyReadEvent result.
     * This is the callback function for calls to UaSession::beginHistoryReadEvent.

</member>
        <member name="M:UaClientSdk.UaSessionCallback.historyReadAtTimeComplete(System.UInt32!System.Runtime.CompilerServices.IsLong,UaStatus!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaObjectArray&lt;UaClientSdk.HistoryReadDataResult&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaDiagnosticInfos!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Send historyReadAtTime result.
     * This is the callback function for calls to UaSession::beginHistoryReadAtTime.

</member>
        <member name="M:UaClientSdk.UaSessionCallback.historyReadProcessedComplete(System.UInt32!System.Runtime.CompilerServices.IsLong,UaStatus!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaObjectArray&lt;UaClientSdk.HistoryReadDataResult&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaDiagnosticInfos!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Send historyReadProcessed result.
     * This is the callback function for calls to UaSession::beginHistoryReadProcessed.

</member>
        <member name="M:UaClientSdk.UaSessionCallback.historyReadRawModifiedComplete(System.UInt32!System.Runtime.CompilerServices.IsLong,UaStatus!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaObjectArray&lt;UaClientSdk.HistoryReadDataResult&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaDiagnosticInfos!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Send historyReadRawModified result.
     * This is the callback function for calls to UaSession::beginHistoryReadRawModified.

</member>
        <member name="M:UaClientSdk.UaSessionCallback.deleteReferencesComplete(System.UInt32!System.Runtime.CompilerServices.IsLong,UaStatus!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaStatusCodeArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaDiagnosticInfos!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Send deleteReferences result.
     * This is the callback function for calls to UaSession::beginDeleteReferences.

</member>
        <member name="M:UaClientSdk.UaSessionCallback.deleteNodesComplete(System.UInt32!System.Runtime.CompilerServices.IsLong,UaStatus!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaStatusCodeArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaDiagnosticInfos!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Send deleteNodes result.
     * This is the callback function for calls to UaSession::beginDeleteNodes.

</member>
        <member name="M:UaClientSdk.UaSessionCallback.addReferencesComplete(System.UInt32!System.Runtime.CompilerServices.IsLong,UaStatus!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaStatusCodeArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaDiagnosticInfos!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Send addReferences result.
     * This is the callback function for calls to UaSession::beginAddReferences.

</member>
        <member name="M:UaClientSdk.UaSessionCallback.addNodesComplete(System.UInt32!System.Runtime.CompilerServices.IsLong,UaStatus!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaAddNodesResults!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaDiagnosticInfos!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Send addNodes result.
     * This is the callback function for calls to UaSession::beginAddNodes.

</member>
        <member name="M:UaClientSdk.UaSessionCallback.callComplete(System.UInt32!System.Runtime.CompilerServices.IsLong,UaStatus!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaClientSdk.CallOut!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Send call result.
     * This is the callback function for calls to UaSession::beginCall.

</member>
        <member name="M:UaClientSdk.UaSessionCallback.writeComplete(System.UInt32!System.Runtime.CompilerServices.IsLong,UaStatus!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaStatusCodeArray!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaDiagnosticInfos!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Send write results.
     * This is the callback function for calls to UaSession::beginWrite.

</member>
        <member name="M:UaClientSdk.UaSessionCallback.readComplete(System.UInt32!System.Runtime.CompilerServices.IsLong,UaStatus!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaDataValues!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaDiagnosticInfos!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Send read results.
     * This is the callback function for calls to UaSession::beginRead.

</member>
        <member name="M:UaClientSdk.UaSessionCallback.sslCertificateValidationFailed(System.UInt32!System.Runtime.CompilerServices.IsLong,UaStatusCode!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaByteString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
\brief Callback for verifying the server's SSL certificate.
     * The application must return true if the certificate is trusted. The application must return false if the certificate is not trusted.

</member>
        <member name="M:UaClientSdk.UaSessionCallback.connectError(System.UInt32!System.Runtime.CompilerServices.IsLong,UaClientSdk.UaClient.ConnectServiceType,UaStatus!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean)">
\brief Callback for reporting errors during connection establishment to the application.
     *
     * The callback UaSessionCallback::connectionStatusChanged indicates the overall status of the connection but does not report
     * detailed error information. The connectError callback can be used to get more information about the error scenario. This includes
     * errors during reconnect attempts after a connection interruption.
     *
     * Most of the errors are returned from the communication stack or the OPC UA server but some of the errors like server certificate
     * validation errors are reported by the client SDK. If clientSideError is true, the error was created inside the Client SDK,
     * these errors can be overridden by returning true. The default implementation always returns false.
     *
     * @return true if a Client SDK error should be skipped, false otherwise. The return code is ignored by the SDK if the error was
     *         not created by the Client SDK

</member>
        <member name="M:UaClientSdk.UaSessionCallback.connectionStatusChanged(System.UInt32!System.Runtime.CompilerServices.IsLong,UaClientSdk.UaClient.ServerStatus)">
\brief Send changed status.
     *
     * This callback function is called by the SDK whenever the connection status changes. This is typically
     * the case if UaSession::connect() or UaSession::disconnect() are called or if the connection monitoring
     * detects a connection interruption or was able to re-establish the connection.
     *
     * There is normally no action necessary by the application using the UaSession object other than not calling
     * services if the status is not connected. The only case that may require special actions is the status
     * NewSessionCreated. In these cases the SDK was not able to reuse the old session and created a new session
     * during reconnect. This requires to redo register nodes for the new session or to read the namespace array.

</member>
        <member name="T:UaClientSdk.UaSessionCallback">
@ingroup UaClientLibrary

 \brief UaSessionCallback defines the callback interface for the UaSession class.

 This callback interface needs to be implemented by the user of the UaSession class to receive
 connection status change callbacks from the Client SDK. The interface provides also the callback
 functions for the asynchronous service calls. Only the callbacks for used asynchronous calls need
 to be implemented by the user of the SDK.

 Callbacks from the SDK APIs are coming from worker threads and not from the thread that was used to
 connect to the server. It is in the responsibility of the user of the client API to synchronize the
 data provided by the callbacks with a GUI main thread if this is necessary.

 After UaSession::disconnect() is called, no more callbacks will be sent for this UaSession object.
 The disconnect blocks until all outstanding service calls are finished and results are returned.
 This includes any asynchronous service calls and outstanding callbacks to the client application.

 It is not allowed to block the execution of callbacks when UaSession::disconnect() is called. This
 will lead to a deadlock of the client application.

</member>
        <member name="F:UaClientSdk.SubscriptionSettings.priority">
\brief Defines the relative priority of this subscription within the session.
    *
    * If multiple subscriptions need to send notifications to the client, the server will send notifications to the subscription with the highest priority first.

</member>
        <member name="F:UaClientSdk.SubscriptionSettings.maxNotificationsPerPublish">
\brief The maximum number of notifications that the client wishes to receive in a single publish response.
    *
    * This is one way for the client to limit the
    * memory consumption if that resources is very rare.

</member>
        <member name="F:UaClientSdk.SubscriptionSettings.maxKeepAliveCount">
\brief If the server has no notifications pending for the period of time defined by
    * (MaxKeepAliveCount * PublishingInterval), the server will send a keep alive message to the client.
    *
    * Like that, client and server know that the other side is still alive even if no data is exchanged for some time.

</member>
        <member name="F:UaClientSdk.SubscriptionSettings.lifetimeCount">
\brief The subscription has a lifetime that is defined by multiples of the publishingInterval.
    *
    * In other words if the client can't communicate with the server for a period of time shorter than
    * (lifetimeCount * publishingInterval), then the subscription is still available in the server. After
    * that, the server will delete the subscription. With a publishingInterval of 1000 ms, the default is
    * 20 minutes like the default lifetime of the session. Please make sure you are adjusting the lifetimeCount
    * if you change the publishingInterval.

</member>
        <member name="F:UaClientSdk.SubscriptionSettings.publishingInterval">
\brief The publishingInterval defines the cyclic rate in milliseconds at which the subscription is being requested to return notifications to the client. 
</member>
        <member name="M:UaClientSdk.SubscriptionSettings.Dispose">
Destructor 
</member>
        <member name="M:UaClientSdk.SubscriptionSettings.#ctor">
Constructor 
</member>
        <member name="T:UaClientSdk.SubscriptionSettings">
\brief The SubscriptionSettings class contains the settings for a Subscription. 
</member>
        <member name="M:UaClientSdk.CallOut.Dispose">
Destructor 
</member>
        <member name="M:UaClientSdk.CallOut.#ctor">
Constructor 
</member>
        <member name="T:UaClientSdk.CallOut">
\brief The CallOut class contains the settings for a call request.
</member>
        <member name="M:UaClientSdk.CallIn.Dispose">
Destructor 
</member>
        <member name="M:UaClientSdk.CallIn.#ctor">
Constructor 
</member>
        <member name="T:UaClientSdk.CallIn">
\brief The CallIn class contains the settings for a call request.
</member>
        <member name="M:UaClientSdk.DeleteEventDetail.Dispose">
Destructor 
</member>
        <member name="M:UaClientSdk.DeleteEventDetail.#ctor">
Constructor 
</member>
        <member name="T:UaClientSdk.DeleteEventDetail">
\brief The DeleteRawModifiedDetail class contains the data for one item in a HistoryUpdate call for data.
</member>
        <member name="M:UaClientSdk.UpdateEventDetail.Dispose">
Destructor 
</member>
        <member name="M:UaClientSdk.UpdateEventDetail.#ctor">
Constructor 
</member>
        <member name="T:UaClientSdk.UpdateEventDetail">
\brief The UpdateEventsDetail class contains the data for one item in a HistoryUpdate call for events.
</member>
        <member name="M:UaClientSdk.DeleteAtTimeDetail.Dispose">
Destructor 
</member>
        <member name="M:UaClientSdk.DeleteAtTimeDetail.#ctor">
Constructor 
</member>
        <member name="T:UaClientSdk.DeleteAtTimeDetail">
\brief The DeleteRawModifiedDetail class contains the data for one item in a HistoryUpdate call for data.
</member>
        <member name="M:UaClientSdk.DeleteRawModifiedDetail.Dispose">
Destructor 
</member>
        <member name="M:UaClientSdk.DeleteRawModifiedDetail.#ctor">
Constructor 
</member>
        <member name="T:UaClientSdk.DeleteRawModifiedDetail">
\brief The DeleteRawModifiedDetail class contains the data for one item in a HistoryUpdate call for data.
</member>
        <member name="F:UaClientSdk.UpdateDataDetail.m_isStructureUpdate">
@brief Flag indicating if a structure update should be applied.
     *
     * The default value is false.

</member>
        <member name="F:UaClientSdk.UpdateDataDetail.m_dataValues">
@brief The data values to update history with.
     *
     * The default value is an empty array.

</member>
        <member name="F:UaClientSdk.UpdateDataDetail.m_PerformInsertReplace">
@brief The type of update.
     *
     * Possible values are
     * - OpcUa_PerformUpdateType_Insert  = 1
     * - OpcUa_PerformUpdateType_Replace = 2
     * - OpcUa_PerformUpdateType_Update  = 3
     *
     * The default value is OpcUa_PerformUpdateType_Update.

</member>
        <member name="F:UaClientSdk.UpdateDataDetail.m_nodeId">
@brief The NodeId of the variable node to update.
     *
     * The default value is null.

</member>
        <member name="M:UaClientSdk.UpdateDataDetail.Dispose">
Destructor 
</member>
        <member name="M:UaClientSdk.UpdateDataDetail.#ctor">
Creates a UpdateDataDetail object with default settings described with the parameters.
</member>
        <member name="T:UaClientSdk.UpdateDataDetail">
\brief The UpdateDataDetail class contains the data for one item in a HistoryUpdate call for data.
</member>
        <member name="F:UaClientSdk.HistoryReadEventResult.m_events">
@brief The events for the requested time frame and event filter 
</member>
        <member name="F:UaClientSdk.HistoryReadEventResult.m_continuationPoint">
@brief Continuation point if the server was not able to return all available data 
</member>
        <member name="F:UaClientSdk.HistoryReadEventResult.m_status">
@brief Result code for the operation 
</member>
        <member name="M:UaClientSdk.HistoryReadEventResult.Dispose">
Destructor 
</member>
        <member name="M:UaClientSdk.HistoryReadEventResult.#ctor">
Constructor 
</member>
        <member name="T:UaClientSdk.HistoryReadEventResult">
\brief The HistoryReadDataResult class contains the result for one item in a HistoryRead call for data.
</member>
        <member name="F:UaClientSdk.HistoryReadEventContext.eventFilter">
@brief The event filter for the history read.
     *
     * This is the same event filter used for getting new events through an event monitored item.
     * The default value is null.

</member>
        <member name="F:UaClientSdk.HistoryReadEventContext.endTime">
@brief The end time of the requested time domain.
     *
     * The values can be read in inverse order if the end time is before the start time.
     * The default value is null.

</member>
        <member name="F:UaClientSdk.HistoryReadEventContext.startTime">
@brief The start time of the requested time domain.
     *
     * The values can be read in inverse order if the end time is before the start time.
     * The default value is null.

</member>
        <member name="F:UaClientSdk.HistoryReadEventContext.numValuesPerNode">
@brief Parameter to limit the number of results per node.
     *
     * A server can further limit the number it returns. If the client or server limit exceeds
     * the number of results available, a continuation point is returned in the history read response.
     * The default value is 0.

</member>
        <member name="F:UaClientSdk.HistoryReadEventContext.bReleaseContinuationPoints">
@brief This parameter must be set to true to release a continuation point without requesting more data.
     *
     * The default value is false.

</member>
        <member name="F:UaClientSdk.HistoryReadEventContext.timeStamps">
@brief Enumeration for the timestamps to return with the events.
     *
     * The default value is Source.
     *
     * Possible options are
     * - OpcUa_TimestampsToReturn_Source  = 0,
     * - OpcUa_TimestampsToReturn_Server  = 1,
     * - OpcUa_TimestampsToReturn_Both    = 2,
     *
     * The option OpcUa_TimestampsToReturn_Neither = 3 is invalid for history read.

</member>
        <member name="M:UaClientSdk.HistoryReadEventContext.Dispose">
Destroys the HistoryReadEventContext object.
</member>
        <member name="M:UaClientSdk.HistoryReadEventContext.#ctor">
Creates a HistoryReadEventContext object with default settings described with the parameters.
</member>
        <member name="T:UaClientSdk.HistoryReadEventContext">
\brief The HistoryReadEventContext class contains the settings for a HistoryReadEvent call.
</member>
        <member name="F:UaClientSdk.HistoryReadDataResult.m_modificationInformation">
@brief Modification information for the provided modified data if the isReadModified flag was set. 
</member>
        <member name="F:UaClientSdk.HistoryReadDataResult.m_dataValues">
@brief The data for the requested time frame 
</member>
        <member name="F:UaClientSdk.HistoryReadDataResult.m_continuationPoint">
@brief Continuation point if the server was not able to return all available data 
</member>
        <member name="F:UaClientSdk.HistoryReadDataResult.m_status">
@brief Result code for the operation 
</member>
        <member name="M:UaClientSdk.HistoryReadDataResult.Dispose">
Destructor 
</member>
        <member name="M:UaClientSdk.HistoryReadDataResult.#ctor">
Constructor 
</member>
        <member name="T:UaClientSdk.HistoryReadDataResult">
\brief The HistoryReadDataResult class contains the result for one item in a HistoryRead call for data.
</member>
        <member name="F:UaClientSdk.HistoryReadAtTimeContext.useSimpleBounds">
@brief Flag indicating if simple bound calculation should be applied.
     *
     * The default value is false.

</member>
        <member name="F:UaClientSdk.HistoryReadAtTimeContext.requestedTimes">
@brief The entries in the array define the specific timestamps for which values are to be read.
     *
     * The default value is an empty array.

</member>
        <member name="F:UaClientSdk.HistoryReadAtTimeContext.bReleaseContinuationPoints">
@brief This parameter must be set to true to release a continuation point without requesting more data.
     *
     * The default value is false.

</member>
        <member name="F:UaClientSdk.HistoryReadAtTimeContext.timeStamps">
@brief Enumeration for the timestamps to return with the values.
     *
     * The default value is Source.
     *
     * Possible options are
     * - OpcUa_TimestampsToReturn_Source  = 0,
     * - OpcUa_TimestampsToReturn_Server  = 1,
     * - OpcUa_TimestampsToReturn_Both    = 2,
     *
     * The option OpcUa_TimestampsToReturn_Neither = 3 is invalid for history read.

</member>
        <member name="M:UaClientSdk.HistoryReadAtTimeContext.Dispose">
Destroys the HistoryReadAtTimeContext object.
</member>
        <member name="M:UaClientSdk.HistoryReadAtTimeContext.#ctor">
Creates a HistoryReadAtTimeContext object with default settings described with the parameters.
</member>
        <member name="T:UaClientSdk.HistoryReadAtTimeContext">
\brief The HistoryReadAtTimeContext class contains the settings for a HistoryReadAtTime call.
</member>
        <member name="F:UaClientSdk.HistoryReadProcessedContext.aggregateConfiguration">
@brief The aggregateConfiguration parameter allows clients to override the Aggregate configuration
    * settings supplied by the AggregateConfiguration object in the server on a per call basis.
    *
    * The default values are
    * - UseServerCapabilitiesDefaults = true
    * - TreatUncertainAsBad = false
    * - PercentDataBad = 100
    * - PercentDataGood = 0
    * - UseSlopedExtrapolation = false

</member>
        <member name="F:UaClientSdk.HistoryReadProcessedContext.processingInterval">
@brief Time interval in milliseconds that is used to calculate one aggregated value from the raw values in the history database.
     *
     * The time domain is divided into subintervals with the length of the ResampleInterval beginning with the start
     * time. If the ResampleInterval is 0, one aggregated value is calculated for the time domain.
     * The default value is 0.

</member>
        <member name="F:UaClientSdk.HistoryReadProcessedContext.endTime">
@brief The end time of the requested time domain.
     *
     * The values can be read in inverse order if the end time is before the start time.
     * The default value is null.

</member>
        <member name="F:UaClientSdk.HistoryReadProcessedContext.startTime">
@brief The start time of the requested time domain.
     *
     * The values can be read in inverse order if the end time is before the start time.
     * The default value is null.

</member>
        <member name="F:UaClientSdk.HistoryReadProcessedContext.aggregateTypes">
@brief The NodeIds of the aggregates used for the calculation of the values. The length of this array must match the nodesToRead array. 
</member>
        <member name="F:UaClientSdk.HistoryReadProcessedContext.bReleaseContinuationPoints">
@brief The flag indicates if the Service call is used to release ContinuationPoints returned from previous calls without returning additional data.
     *
     * This allows clients to free resources in the server if the client does not continue the read.
     * The default value is false.

</member>
        <member name="F:UaClientSdk.HistoryReadProcessedContext.timeStamps">
@brief Indicates if the source timestamp, the server timestamp, or both should be returned.
     *
     * The default value is Source.
     *
     * Possible options are
     * - OpcUa_TimestampsToReturn_Source  = 0,
     * - OpcUa_TimestampsToReturn_Server  = 1,
     * - OpcUa_TimestampsToReturn_Both    = 2,
     *
     * The option OpcUa_TimestampsToReturn_Neither = 3 is invalid for history read.
     *
     * The selected timestamp is also used for the selection of the values in the time domain to read. If both are selected, the source timestamp is used.

</member>
        <member name="M:UaClientSdk.HistoryReadProcessedContext.Dispose">
Destructor 
</member>
        <member name="M:UaClientSdk.HistoryReadProcessedContext.#ctor">
Creates a HistoryReadProcessedContext object with default settings described with the parameters.
</member>
        <member name="T:UaClientSdk.HistoryReadProcessedContext">
\brief The HistoryReadProcessedContext class contains the settings for a HistoryReadProcessed call.
</member>
        <member name="F:UaClientSdk.HistoryReadRawModifiedContext.returnBounds">
@brief Indicates if bounding values should be returned.
     *
     * Bounding values are delivered if this flag is set to true and no value is available for the requested start or end time.
     * The default value is false.

</member>
        <member name="F:UaClientSdk.HistoryReadRawModifiedContext.endTime">
@brief The end time of the requested time domain.
     *
     * The values can be read in inverse order if the end time is before the start time.
     * The default value is null.

</member>
        <member name="F:UaClientSdk.HistoryReadRawModifiedContext.startTime">
@brief The start time of the requested time domain.
     *
     * The values can be read in inverse order if the end time is before the start time.
     * The default value is null.

</member>
        <member name="F:UaClientSdk.HistoryReadRawModifiedContext.numValuesPerNode">
@brief Parameter to limit the number of results per node.
     *
     * A server can further limit the number he returns. If the client or server limit exceeds
     * the number of results available, a continuation point is returned in the history read response.
     * The default value is 0.

</member>
        <member name="F:UaClientSdk.HistoryReadRawModifiedContext.bReleaseContinuationPoints">
@brief This parameter must be set to true to release a continuation point without requesting more data.
     *
     * The default value is false.

</member>
        <member name="F:UaClientSdk.HistoryReadRawModifiedContext.timeStamps">
@brief Enumeration for the timestamps to return with the values.
     *
     * The default value is Source.
     *
     * Possible options are
     * - OpcUa_TimestampsToReturn_Source  = 0,
     * - OpcUa_TimestampsToReturn_Server  = 1,
     * - OpcUa_TimestampsToReturn_Both    = 2,
     *
     * The option OpcUa_TimestampsToReturn_Neither = 3 is invalid for history read.

</member>
        <member name="F:UaClientSdk.HistoryReadRawModifiedContext.isReadModified">
@brief Indicates if modified data should be read instead of the raw data.
     *
     * The default value is false.

</member>
        <member name="M:UaClientSdk.HistoryReadRawModifiedContext.Dispose">
Destroys the HistoryReadRawModifiedContext object.
</member>
        <member name="M:UaClientSdk.HistoryReadRawModifiedContext.#ctor">
Creates a HistoryReadRawModifiedContext object with default settings described with the parameters.
</member>
        <member name="T:UaClientSdk.HistoryReadRawModifiedContext">
\brief The HistoryReadRawModifiedContext class contains the settings for a HistoryReadRawModified call.
</member>
        <member name="F:UaClientSdk.BrowseContext.resultMask">
@brief Result mask to define results to be returned with the browse response.
     *
     * The default value is OpcUa_BrowseResultMask_All to return all results. The NodeIds of the target nodes are
     * always returned. It is recommended to request only the information that is used by the client application.
     * Possible result masks to set are
     * - OpcUa_BrowseResultMask_None              = 0,
     * - OpcUa_BrowseResultMask_ReferenceTypeId   = 1,
     * - OpcUa_BrowseResultMask_IsForward         = 2,
     * - OpcUa_BrowseResultMask_NodeClass         = 4,
     * - OpcUa_BrowseResultMask_BrowseName        = 8,
     * - OpcUa_BrowseResultMask_DisplayName       = 16,
     * - OpcUa_BrowseResultMask_TypeDefinition    = 32,
     * - OpcUa_BrowseResultMask_All               = 63,
     * - OpcUa_BrowseResultMask_ReferenceTypeInfo = 3,
     * - OpcUa_BrowseResultMask_TargetInfo        = 60

</member>
        <member name="F:UaClientSdk.BrowseContext.nodeClassMask">
@brief NodeClass filter mask.
     *
     * The default value is 0 to return all NodeClasses.
     *
     * Possible masks to set are
     * - OpcUa_NodeClass_Object        = 1,
     * - OpcUa_NodeClass_Variable      = 2,
     * - OpcUa_NodeClass_Method        = 4,
     * - OpcUa_NodeClass_ObjectType    = 8,
     * - OpcUa_NodeClass_VariableType  = 16,
     * - OpcUa_NodeClass_ReferenceType = 32,
     * - OpcUa_NodeClass_DataType      = 64,
     * - OpcUa_NodeClass_View          = 128

</member>
        <member name="F:UaClientSdk.BrowseContext.includeSubtype">
@brief Indicates if the /ref referenceTypeId to follow should include subtypes.
     *
     * The default value is true.

</member>
        <member name="F:UaClientSdk.BrowseContext.referenceTypeId">
@brief The type of reference to follow.
     *
     * The NodeId of the reference type to follow in the browse request. This parameter is
     * used in combination with \ref includeSubtype. If abstract base reference types are specified,
     * the parameter ref includeSubtype must be set to true.
     * The default value is OpcUaId_HierarchicalReferences.

</member>
        <member name="F:UaClientSdk.BrowseContext.browseDirection">
@brief The direction of the browse with option forward, inverse or both.
     *
     * The default value is forward. Possible options are
     * - OpcUa_BrowseDirection_Forward
     * - OpcUa_BrowseDirection_Inverse
     * - OpcUa_BrowseDirection_Both

</member>
        <member name="F:UaClientSdk.BrowseContext.maxReferencesToReturn">
@brief Parameter to limit the number of results per node.
     *
     * A server can further limit the number it returns. If the client or server limit exceeds
     * the number of results available, a continuation point is returned in the browse response.
     * The default value is 0.

</member>
        <member name="F:UaClientSdk.BrowseContext.view">
@brief Optional view parameter allows browsing in a view context.
     *
     * The view context includes a view NodeId and an optional view version or view timestamp.
     * The default setting is a null ViewDescription. 
</member>
        <member name="M:UaClientSdk.BrowseContext.Dispose">
Destroys the browse context object.
</member>
        <member name="M:UaClientSdk.BrowseContext.#ctor">
Creates a BrowseContext object with settings to browse hierarchical references in forward direction and
     * other default settings described for the parameters.

</member>
        <member name="T:UaClientSdk.BrowseContext">
\brief The BrowseContext class contains the settings for a browse request.
</member>
        <member name="F:UaClientSdk.ServiceSettings.responseTimestamp">
@brief Timestamp of the response as returned by the server. 
</member>
        <member name="F:UaClientSdk.ServiceSettings.requestHandle">
@brief Request handle used for the service call.
     *
     * The request handle is sent to the server in the RequestHeader and is used to cancel service invocations.
     * If the request handle is not set (initial value is 0), a unique number is set by the SDK.
     *
     * The SDK is using numbers above 1.000.000 for creating unique numbers. An application must make sure to only
     * use numbers below 1.000.000 to avoid conflicts when cancel is called.

</member>
        <member name="F:UaClientSdk.ServiceSettings.stringTable">
@brief UaString table for returned diagnostic information. 
</member>
        <member name="F:UaClientSdk.ServiceSettings.auditEntryId">
@brief An identifier that identifies the Client's security audit log entry associated with this request. 
</member>
        <member name="F:UaClientSdk.ServiceSettings.returnDiagnostics">
@brief Bit mask that defines the diagnostic information to be returned from the server. The default setting is 0.
    *
    * Bit Value | Diagnostics to return | Define
    * ----------|-----------------------|-------
    * 0x0000 0001 | ServiceLevel / SymbolicId | OpcUa_DiagnosticsMasks_ServiceSymbolicId
    * 0x0000 0002 | ServiceLevel / LocalizedText | OpcUa_DiagnosticsMasks_ServiceLocalizedText
    * 0x0000 0004 | ServiceLevel / AdditionalInfo | OpcUa_DiagnosticsMasks_ServiceAdditionalInfo
    * 0x0000 0008 | ServiceLevel / Inner StatusCode | OpcUa_DiagnosticsMasks_ServiceInnerStatusCode
    * 0x0000 0010 | ServiceLevel / Inner Diagnostics | OpcUa_DiagnosticsMasks_ServiceInnerDiagnostics
    * 0x0000 0020 | OperationLevel / SymbolicId | OpcUa_DiagnosticsMasks_OperationSymbolicId
    * 0x0000 0040 | OperationLevel / LocalizedText | OpcUa_DiagnosticsMasks_OperationLocalizedText
    * 0x0000 0080 | OperationLevel / AdditionalInfo | OpcUa_DiagnosticsMasks_OperationAdditionalInfo
    * 0x0000 0100 | OperationLevel / Inner StatusCode | OpcUa_DiagnosticsMasks_OperationInnerStatusCode
    * 0x0000 0200 | OperationLevel / Inner Diagnostics | OpcUa_DiagnosticsMasks_OperationInnerDiagnostics
    *
    * Additional defines for combinations:
    *
    *
    * Description  | Define
    * -------------|--------------
    * All service level diagnostic information | OpcUa_DiagnosticsMasks_ServiceAll
    * All operation level diagnostic information | OpcUa_DiagnosticsMasks_OperationAll
    * All diagnostic information without inner status | OpcUa_DiagnosticsMasks_NoInnerStatus
    * All diagnostic information | OpcUa_DiagnosticsMasks_All
    * SymbolicId for service and operation level | OpcUa_DiagnosticsMasks_SymbolicId
    * LocalizedText for service and operation level | OpcUa_DiagnosticsMasks_LocalizedText
    * AdditionalInfo for service and operation level | OpcUa_DiagnosticsMasks_AdditionalInfo

</member>
        <member name="F:UaClientSdk.ServiceSettings.callTimeout">
@brief The time-out for the service call in milliseconds. The default setting is 10 seconds.
</member>
        <member name="M:UaClientSdk.ServiceSettings.Dispose">
\brief Destroys the service settings object.
</member>
        <member name="M:UaClientSdk.ServiceSettings.#ctor">
\brief Creates a ServiceSettings object with callTimeout set to 10 seconds.
</member>
        <member name="T:UaClientSdk.ServiceSettings">
\brief The ServiceSettings class contains the general settings for a call.
</member>
        <member name="F:UaClientSdk.SessionSecurityInfo.doServerCertificateVerify">
\brief Indicates if the client SDK must verify the server certificate or if this was done already by the application.
    *
    * The default value is True to force the client SDK to verify the server certificate before establishing the connection.

</member>
        <member name="F:UaClientSdk.SessionSecurityInfo.serverCertificate">
\brief Server certificate (public key). 
</member>
        <member name="T:UaClientSdk.SessionSecurityInfo">
\brief The SessionSecurityInfo class contains the security related session settings for connect.
</member>
        <member name="M:UaClientSdk.CertificateValidationCallback.verificationError(UaClientSdk.SessionSecurityInfo*,System.Void*,UaByteString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong)">
\brief Callback method to inform about errors during certificate validation.
    * @return true if a certificate validation error should be ignored, false otherwise. If an error is ignored,
    *         validation continues, otherwise verification will be stopped. 
</member>
        <member name="T:UaClientSdk.CertificateValidationCallback">
\brief The CertificateValidationCallback is an interface for retrieving information about certificate validation errors.
* If detailed information about certificate validation is needed, the SessionSecurityInfo::verifyServerCertificate() method
* can be called by passing this interface. For each single error during certificate validation, the verificationError()
* callback will be invoked containing detailed information about the error. 
</member>
        <member name="F:UaClientSdk.ClientSecurityInfo.clientPrivateKey">
\brief Client private key 
</member>
        <member name="F:UaClientSdk.ClientSecurityInfo.clientCertificate">
\brief Client certificate (public key) 
</member>
        <member name="F:UaClientSdk.ClientSecurityInfo.messageSecurityMode">
\brief The message security mode used for the connection.
   *
   * Possible values are:
   *- OpcUa_MessageSecurityMode_None
   *- OpcUa_MessageSecurityMode_Sign
   *- OpcUa_MessageSecurityMode_SignAndEncrypt

</member>
        <member name="F:UaClientSdk.ClientSecurityInfo.sSecurityPolicy">
\brief The name of the security policy used for the connection.
    *
    * Value                              | String Representation
    * -----------------------------------|--------------------------
    * OpcUa_SecurityPolicy_None          | "http://opcfoundation.org/UA/SecurityPolicy#None" for security disabled
    * OpcUa_SecurityPolicy_Basic128Rsa15 | "http://opcfoundation.org/UA/SecurityPolicy#Basic128Rsa15"
    * OpcUa_SecurityPolicy_Basic256      | "http://opcfoundation.org/UA/SecurityPolicy#Basic256"

</member>
        <member name="T:UaClientSdk.ClientSecurityInfo">
The ClientSecurityInfo class contains the security related settings to create a secure channel.
</member>
        <member name="F:UaClientSdk.SessionConnectInfo.typeDictionaryMode">
@brief The mode for updating the data type dictionaries from the server
     * Possible options are
     * <dl>
     *   <dt>FirstUse</dt><dd>The data type dictionary is read when used the first time by the client application</dd>
     *   <dt>Manual</dt><dd>Read of dictionaries from server is only triggered through UaSession::loadDataTypeDictionaries()</dd>
     *   <dt>Connect</dt><dd>Initial read of dictionaries from server is done at connect</dd>
     *   <dt>Reconnect</dt><dd>Initial read of dictionaries from server is done at connect and they are updated at reconnect</dd>
     * </dl>
     *
     * The default value is FirstUse.
     * For this functionality, SUPPORT_XML_PARSER needs to be enabled. If SUPPORT_XML_PARSER is disabled, only the known
     * type dictionary of namespace 0 will be loaded.

</member>
        <member name="F:UaClientSdk.SessionConnectInfo.nMaxOperationsPerServiceCall">
@brief The maximum number of operations used in a Service call.
     *
     * The OPC UA server may restrict the message size and array sizes. This parameter provides a way
     * to reduce the number of operations, like nodes to read in a Read call, to a number that works.
     * The caller of the API does not need to care about the limitations. The SDK will send several
     * Service calls if the number of operations provided by the caller exceeds the maximum number the server
     * accepts. The value 0 indicates no limitation.
     *
     * The default value is 0.

</member>
        <member name="F:UaClientSdk.SessionConnectInfo.nWatchdogTimeout">
@brief The time-out for watchdog calls in milliseconds. After one unsuccessful call
     *
     * The time-out will be two times this value for the next call.
     *
     * The default value for the watchdog time is 5000 milliseconds.

</member>
        <member name="F:UaClientSdk.SessionConnectInfo.endpointDescriptions">
@brief The endpoint descriptions returned from the server during session creation.
    *
    * The list must be verified with the list returned during discovery at the first
    * connect to make sure the discovery server provided the right list and the client
    * was able to choose the most secure setting.

</member>
        <member name="F:UaClientSdk.SessionConnectInfo.sServerUri">
@brief The Server Uri of the server to connect through a gateway server.
    *
    * This value is only specified if the EndpointDescription has a gatewayServerUri.
    * This value is the applicationUri from the EndpointDescription which is the
    * applicationUri for the underlying Server.

</member>
        <member name="F:UaClientSdk.SessionConnectInfo.bRetryInitialConnect">
@brief A flag indicating if the client SDK should continue to try a connect establishment in the background if the initial connect fails.
     *
     * The default value is OpcUa_False.

</member>
        <member name="F:UaClientSdk.SessionConnectInfo.bAutomaticReconnect">
@brief A flag indicating if the client SDK should try to reconnect in the case of a connection error.
     *
     * The default value is OpcUa_True.

</member>
        <member name="F:UaClientSdk.SessionConnectInfo.nWatchdogTime">
@brief The time between watchdog checks in milliseconds.
     *
     * The default value for the watchdog time is 5000 milliseconds.

</member>
        <member name="F:UaClientSdk.SessionConnectInfo.nPublishTimeout">
@brief The time-out for publish calls in milliseconds.
     *
     * The default value for the publish time-out is 60 seconds (60000ms).

</member>
        <member name="F:UaClientSdk.SessionConnectInfo.nConnectTimeout">
@brief The time-out for the connect call in milliseconds.
     *
     * The default value for the connect time-out is 5000 milliseconds.

</member>
        <member name="F:UaClientSdk.SessionConnectInfo.nSecureChannelLifetime">
@brief The lifetime of the SecureChannel in milliseconds before it gets renewed.
    *
    * This is the time the key pair exchanged during secure channel establishment are valid. The stack starts
    * the renew process that exchanges new key pairs after 75% of the lifetime. The default lifetime is one hour.

</member>
        <member name="F:UaClientSdk.SessionConnectInfo.arAdditionalLocaleIds">
@brief Additional locale IDs to be used for the session.
    * See @ref sLocaleId for examples.

</member>
        <member name="F:UaClientSdk.SessionConnectInfo.sLocaleId">
@brief The locale ID uses for the session.
    *
    * Examples are
    * - "en" for English
    * - "en-US" for English (US)
    * - "de" for German
    * - "de-DE" for German (Germany)
    * - "de-AT" for German (Austria)

</member>
        <member name="F:UaClientSdk.SessionConnectInfo.nSessionTimeout">
@brief The time-out for the application session in milliseconds.
    *
    * The client library ensures that the session does not time out as long as the client application
    * does not call disconnect. The session can time out if the network connection is broken for longer
    * than the defined session time-out. A long time-out ensures that the established application session
    * can be reused after the longer network interruption. Default value is 20 minutes. This time-out has
    * no effect for the individual time-out for a service call (can be defined per call). This time-out is
    * only used to ensure that the server is able to release resources if a client is disconnected for a
    * long time.

</member>
        <member name="F:UaClientSdk.SessionConnectInfo.clientConnectionId">
@brief The client defined connection Id.
    *
    * The connection Id is returned in all session callbacks to distinguish between callbacks
    * for different connections if the same callback interface is used for more than one connection.
    * Can be 0 if not needed.

</member>
        <member name="F:UaClientSdk.SessionConnectInfo.applicationType">
The Client Application Type.
Possible values are:
- OpcUa_ApplicationType_Client
- OpcUa_ApplicationType_ClientAndServer

</member>
        <member name="F:UaClientSdk.SessionConnectInfo.sSessionName">
@brief The Session Name. This name should be unique for the instance of the client.

</member>
        <member name="F:UaClientSdk.SessionConnectInfo.sProductUri">
@brief The Client Product Uri.

</member>
        <member name="F:UaClientSdk.SessionConnectInfo.sApplicationName">
@brief The Client Application Name.

</member>
        <member name="F:UaClientSdk.SessionConnectInfo.sApplicationUri">
@brief The Client Application Uri.

</member>
        <member name="M:UaClientSdk.SessionConnectInfo.Dispose">
Destructor 
</member>
        <member name="M:UaClientSdk.SessionConnectInfo.#ctor">
\brief Creates a SessionConnectInfo object with default settings
     *
     * \todo include list of default settings?

</member>
        <member name="T:UaClientSdk.SessionConnectInfo">
\brief The SessionConnectInfo class contains the session settings for connect.
</member>
        <member name="T:UaClientSdk.UaClient.ReadTypeDictionaries">
Enumeration used to define the access to the data type dictionary
</member>
        <member name="T:UaClientSdk.UaClient.ConnectServiceType">
Service type enumeration used to indicate a connection establishment step in the client API
</member>
        <member name="T:UaClientSdk.UaClient.ServerStatus">
OPC UA server status enumeration used to indicate the connection status in the client API
</member>
        <member name="T:UaClientSdk.UaClient">
\brief Namespace class for OPC UA Client Library.
</member>
        <member name="T:UaHistoryEventFieldList">
@ingroup CppBaseLibraryClass
 *  @brief Wrapper class for the UA stack structure OpcUa_HistoryEventFieldList.
 *
 *  This class encapsulates the native OpcUa_HistoryEventFieldList structure
 *  and handles memory allocation and cleanup for you.
 *  UaHistoryEventFieldList uses implicit sharing to avoid needless copying and to boost the performance.
 *  Only if you modify a shared HistoryEventFieldList it creates a copy for that (copy-on-write).
 *  So assigning another UaHistoryEventFieldList or passing it as parameter needs constant time and is nearly as fast as assigning a pointer.

</member>
        <member name="T:UaEndpointDescription">
@ingroup CppBaseLibraryClass
 *  @brief Wrapper class for the UA stack structure OpcUa_EndpointDescription.
 *
 *  This class encapsulates the native OpcUa_EndpointDescription structure
 *  and handles memory allocation and cleanup for you.
 *  UaEndpointDescription uses implicit sharing to avoid needless copying and to boost the performance.
 *  Only if you modify a shared EndpointDescription it creates a copy for that (copy-on-write).
 *  So assigning another UaEndpointDescription or passing it as parameter needs constant time and is nearly as fast as assigning a pointer.

</member>
        <member name="T:UaUserTokenPolicy">
@ingroup CppBaseLibraryClass
 *  @brief Wrapper class for the UA stack structure OpcUa_UserTokenPolicy.
 *
 *  This class encapsulates the native OpcUa_UserTokenPolicy structure
 *  and handles memory allocation and cleanup for you.
 *  UaUserTokenPolicy uses implicit sharing to avoid needless copying and to boost the performance.
 *  Only if you modify a shared UserTokenPolicy it creates a copy for that (copy-on-write).
 *  So assigning another UaUserTokenPolicy or passing it as parameter needs constant time and is nearly as fast as assigning a pointer.

</member>
        <member name="T:UaApplicationDescription">
@ingroup CppBaseLibraryClass
 *  @brief Wrapper class for the UA stack structure OpcUa_ApplicationDescription.
 *
 *  This class encapsulates the native OpcUa_ApplicationDescription structure
 *  and handles memory allocation and cleanup for you.
 *  UaApplicationDescription uses implicit sharing to avoid needless copying and to boost the performance.
 *  Only if you modify a shared ApplicationDescription it creates a copy for that (copy-on-write).
 *  So assigning another UaApplicationDescription or passing it as parameter needs constant time and is nearly as fast as assigning a pointer.

</member>
        <member name="T:UaEventFilter">
@ingroup CppBaseLibraryClass
 * Wrapper class for the OPC UA EventFilter structure
 *
 * The EventFilter provides for the filtering and content selection of Event Subscriptions.
 * If an Event Notification conforms to the filter defined by the where parameter of the
 * EventFilter, then the Notification is sent to the Client. Each Event Notification includes
 * the fields defined by the selectClauses parameter of the EventFilter.

</member>
        <member name="T:UaSimpleAttributeOperand">
OPC UA SimpleAttributeOperand used in ContentFilterElement or UaEventFilter.
 *
 * This class is used to build and hold an OPC UA SimpleAttributeOperand used in the UaContentFilterElement or in the UaEventFilter.
 * The selectClause and whereClause parameters of an EventFilter are specified with the SimpleAttributeOperand structure. The structure is
 * composed of
 * - typeId (NodeId) NodeId of the type definition node. This is an event type node for event filters.
 *                   In some cases the same BrowsePath will apply to multiple EventTypes. If the Client specifies the BaseEventType in the
 *                   SimpleAttributeOperand then the Server shall evaluate the BrowsePath without considering the Type. The default value for the
 *                   typeId set by the class is the BaseEventType.
 * - browsePath[] (QualifiedName) This parameter specifies a relative path using a list of BrowseNames. The list of BrowseNames in an event filter
 *                                represents the nodes from an EventType to the event field of interest following hierarchical forward references.
 *                                All Nodes followed by the browsePath shall be of the NodeClass Object or Variable.
 *                                If this list is empty the Node is the instance of the TypeDefinition e.g. the instance of a Condition object.
 * - attributeId (IntegerId) The SimpleAttributeOperand structure allows the Client to specify any Attribute, however, the
 *                           Server is only required to support the Value Attribute (OpcUa_Attributes_Value) for Variable Nodes
 *                           and the NodeId Attribute (OpcUa_Attributes_NodeId)for Object Nodes.
 *                           The default value set by this class is the Value attribute.
 * - indexRange (NumericRange) This parameter is used to identify a single element of an array, or a single range of indexes for an array.
 *
 * This class is concrete implementation of the abstract UaFilterOperand. It specifies any attribute of an object or variable node using
 * a TypeDefinition and a relative path constructed from BrowseNames.

</member>
        <member name="T:UaLiteralOperand">
OPC UA LiteralOperand used in ContentFilterElement.
 *
 *  This class is used to build and hold an OPC UA LiteralOperand used in the UaContentFilterElement. This class is
 *  concrete implementation of the abstract UaFilterOperand. It contains a literal value used in a filter.

</member>
        <member name="T:UaElementOperand">
OPC UA ElementOperand used in ContentFilterElement.
 *
 *  This class is used to build and hold an OPC UA ElementOperand used in the UaContentFilterElement. This class is
 *  concrete implementation of the abstract UaFilterOperand. It contains a content filter element. This type is used
 *  to build a logic tree of sub elements by linking the operand of one element to a sub-element

</member>
        <member name="T:UaContentFilterElement">
OPC UA ContentFilterElement used in ContentFilter.
 *
 *  This class is used to build and hold an OPC UA ContentFilterElement used in the UaContentFilter.
 *  The content filter elements and the element filter operands (UaElementOperand derived from UaFilterOperand)
 *  can be used to build a filter hierarchy.

</member>
        <member name="T:UaFilterOperand.FilterOperandType">
FilterOperandType enumeration 
</member>
        <member name="T:UaFilterOperand">
OPC UA FilterOperand used in ContentFilterElement.
 *
 *  This class is used to build and hold an OPC UA FilterOperand used in the UaContentFilterElement. This abstract
 *  class can not be used directly. The three concrete classes UaElementOperand, UaLiteralOperand and UaSimpleAttributeOperand
 *  can be used. The content filter elements and the element filter operands (UaElementOperand)
 *  can be used to build a filter hierarchy.

</member>
        <member name="T:UaContentFilter">
OPC UA ContentFilter used in event filters and the Query service.
 *
 *  This class is used to build and hold an OPC UA ContentFilter used in the event filter of event
 *  monitored items and as filter parameter for the Query service.

</member>
        <member name="F:UaUserIdentityTokenKerberosTicket.kerberosTicket">
@brief User token data
</member>
        <member name="T:UaUserIdentityTokenKerberosTicket">
@brief Class representing a KerberosToken user identity token.

 *  The class is derived from UaUserIdentityToken and is used if KerberosToken based
 *  user identity is provided.

</member>
        <member name="F:UaUserIdentityTokenCertificate.userPrivateKey">
@brief User private key
</member>
        <member name="F:UaUserIdentityTokenCertificate.userCertificateData">
@brief User certificate data
</member>
        <member name="T:UaUserIdentityTokenCertificate">
@brief Class representing a Certificate user identity token.

 *  The class is derived from UaUserIdentityToken and is used if certificate based
 *  user identity is provided.

</member>
        <member name="F:UaUserIdentityTokenUserPassword.sPassword">
@brief Password string
</member>
        <member name="F:UaUserIdentityTokenUserPassword.sUserName">
@brief User name string
</member>
        <member name="T:UaUserIdentityTokenUserPassword">
@brief Class representing an User and Password user identity token.

 *  The class is derived from UaUserIdentityToken and is used if user name and password based
 *  user identity is provided.

</member>
        <member name="T:UaUserIdentityTokenAnonymous">
@brief Class representing an anonymous user identity token.

 *  The class is derived from UaUserIdentityToken and is the default user settings if no
 *  specific user identity is provided.

</member>
        <member name="T:UaUserIdentityToken">
@brief Base class for the different user identity token classes.

 *  The specific user identity tokens are represented by the derived classes UaUserIdentityTokenAnonymous and
 *  UaUserIdentityTokenUserPassword. This base class is only used in method signatures.

</member>
        <member name="T:UaTraceHook">
@ingroup CppBaseLibraryClass
 *  Interface used to register a trace hook

</member>
        <member name="T:UaTrace.TraceLevel">
@brief Definition of the TraceLevel Enumeration
</member>
        <member name="T:UaTrace">
@ingroup CppBaseLibraryClass
 *  A class used for trace outputs (error, information,...).

</member>
        <member name="T:UaMutexRefCounted">
UaMutexRefCounted
 *  @brief Reference counted mutex implementation.
 *  A derived class of UaMutex which provides the possibility to control the lifetime of the mutex object based on its reference counter.

</member>
        <member name="T:UaMutexLocker">
UaMutexLocker
 *  @brief Auto lock and unlock class for Mutex class.
 *  The UaMutexLocker class is a convenience class that simplifies locking and unlocking of a mutex.
 *  Locking and unlocking an UaMutex in complex functions and statements or in exception handling code is error-prone
 *  and difficult to debug. UaMutexLocker can be used in such situations to ensure that the state of the mutex is always well-defined.
 *  UaMutexLocker should be created within a function where an UaMutex needs to be locked.
 *  The mutex is locked when UaMutexLocker is created.
 *  You can unlock the mutex with unlock().
 *  If locked, the mutex will be unlocked when the UaMutexLocker is destroyed.
 *  It is not possible to create plane copies of this Class.

</member>
        <member name="T:UaMutex">
@ingroup CppBaseLibraryClass
 *  @brief The UaMutex class provides access serialization between threads.
 *  The purpose of a UaMutex is to protect an object, data structure or section of code so that only one thread
 *  can access it at a time (this is similar to the Java synchronized keyword).
 *  It is usually best to use a mutex with a UaMutexLocker since this makes it easy to ensure that
 *  locking and unlocking are performed consistently.
 *  It is not possible to create plane copies of this Class.

</member>
        <member name="M:AscDaServer.#ctor(AscDaServer!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Prohibit use of copy constructor and = operator **********
</member>
        <member name="M:AscDaServer.getProperties(std.vector&lt;AscItemIdentifier&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;System.UInt32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,std.vector&lt;AscItemProperties&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Get item properties

</member>
        <member name="M:AscDaServer.browse(std.basic_string&lt;System.UInt16,std.char_traits{System.UInt16},std.allocator&lt;System.UInt16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.UInt16,std.char_traits{System.UInt16},std.allocator&lt;System.UInt16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.UInt16,std.char_traits{System.UInt16},std.allocator&lt;System.UInt16&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.UInt32,AscOpc.BrowseFilter,std.vector&lt;System.UInt32&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,System.Boolean,std.vector&lt;AscBrowseElement&gt;*!System.R">
Browse OPC server adress space

</member>
        <member name="M:AscDaServer.subscriptionCancel(System.UInt32)">
Cancel Subscription. 

</member>
        <member name="T:AscDaServer">
General OPC Data Access class which is hiding all specifications.
* This is the main class for connecting with any OPC DA Server.

</member>
        <member name="M:AscUaEndpointIdentifier.GetApplicationUri">
Methods *********************
</member>
        <member name="M:AscUaEndpointIdentifier.op_Assign(AscUaEndpointIdentifier!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Operators ********************
</member>
        <member name="M:AscUaEndpointIdentifier.#ctor">
Constructor ******************
</member>
        <member name="M:AscServerIdentifier.#ctor">
Prohibit use of default constructor **********
</member>
        <member name="M:AscServerIdentifier.Reset(std.basic_string&lt;System.UInt16,std.char_traits{System.UInt16},std.allocator&lt;System.UInt16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.UInt16,std.char_traits{System.UInt16},std.allocator&lt;System.UInt16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.UInt16,std.char_traits{System.UInt16},std.allocator&lt;System.UInt16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AscOpc.ServerCategory)">
Methods **********************
</member>
        <member name="M:AscServerIdentifier.op_Assign(AscServerIdentifier!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Operators ********************
</member>
        <member name="M:AscServerIdentifier.#ctor(std.basic_string&lt;System.UInt16,std.char_traits{System.UInt16},std.allocator&lt;System.UInt16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.UInt16,std.char_traits{System.UInt16},std.allocator&lt;System.UInt16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.UInt16,std.char_traits{System.UInt16},std.allocator&lt;System.UInt16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,AscOpc.ServerCategory)">
Constructor ******************
</member>
        <member name="M:AscCmnClient.#ctor(AscCmnClient!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Prohibit use of copy constructor and = operator **********
</member>
        <member name="M:AscCmnClient.clsidFromProgId(std.basic_string&lt;System.UInt16,std.char_traits{System.UInt16},std.allocator&lt;System.UInt16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.UInt16,std.char_traits{System.UInt16},std.allocator&lt;System.UInt16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.UInt16,std.char_traits{System.UInt16},std.allocator&lt;System.UInt16&gt;&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Get the CLSID for a give node name and ProgID

</member>
        <member name="M:AscCmnClient.enumComServer(std.basic_string&lt;System.UInt16,std.char_traits{System.UInt16},std.allocator&lt;System.UInt16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,System.Boolean,std.vector&lt;AscOpc.ServerCategory&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;AscServerIdentifier&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Enumerates the Com OPC servers for the given node name

</member>
        <member name="M:AscCmnClient.getCertificateForEndpoint(std.basic_string&lt;System.UInt16,std.char_traits{System.UInt16},std.allocator&lt;System.UInt16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.basic_string&lt;System.UInt16,std.char_traits{System.UInt16},std.allocator&lt;System.UInt16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,_OpcUa_MessageSecurityMode,UaByteString*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Get the server certificate from the server

</member>
        <member name="M:AscCmnClient.enumUaEndpoints(std.basic_string&lt;System.UInt16,std.char_traits{System.UInt16},std.allocator&lt;System.UInt16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;AscUaEndpointIdentifier&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Enumerates the OPC UA endpoints for the given discovery URL

</member>
        <member name="M:AscCmnClient.enumUaServer(std.basic_string&lt;System.UInt16,std.char_traits{System.UInt16},std.allocator&lt;System.UInt16&gt;&gt;!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,std.vector&lt;AscServerIdentifier&gt;*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Enumerates the OPC UA servers for the given node name

</member>
        <member name="M:AscCmnClient.#ctor">
construction / destruction

</member>
        <member name="M:AscItemValue.#ctor">
Constructor ******************
</member>
        <member name="M:AscBrowseElement.#ctor">
Constructor ******************
</member>
        <member name="M:AscItemProperties.#ctor">
Constructor ******************
</member>
        <member name="M:AscItemProperty.#ctor">
Constructor ******************
</member>
        <member name="M:AscItemIdentifier.#ctor">
Constructor ******************
</member>
        <member name="M:AscServerConnectInfo.#ctor">
Constructor ******************
</member>
        <member name="M:AscServerSecurityInfo.#ctor">
Constructor ******************
</member>
        <member name="T:WindowsStoreLocation">
WindowsStoreLocation Enumeration 
</member>
        <member name="T:UaDateTime">
@ingroup CppBaseLibraryClass
 @brief Wrapper class for the UA stack structure OpcUa_DateTime.

 Helper class for handling the OPC UA built-in data type DateTime. It provides conversion and
 comparison functions and allows to create a current timestamp.

 A DateTime value is a 64-bit signed integer which represents the number of 100 nanosecond intervals
 since January 1, 1601 (UTC). It is normally represented by the structure OpcUa_DateTime with the two UInt32
 members dwLowDateTime and dwHighDateTime. This may be different on special platforms.

 Not all platforms will be able to represent the full range of dates and times that can be
 represented with this built-in data type. For example, the UNIX time_t structure only has a 1 second
 resolution and cannot represent dates prior to 1970. For this reason, a number of rules shall be
 applied when dealing with date/time values that exceed the dynamic range of a platform. These rules are:
 - A DateTime value is 0 if either the value is equal to or earlier than 1601-01-01 12:00AM or the value is the
   earliest date that can be represented within the platform.
 - A DateTime value is the maximum Int64 value if either the value is equal to or greater than 9999-01-01 11:59:59PM
   or the value is the latest date/time that can be represented within the platform.
 - A value is the earliest time on the platform if either the DateTime value is 0 or the DateTime value represents a time
   earlier than the earliest time that can be represented within the platform.
 - A value is the latest time on the platform if either the DateTime is the maximum value for an Int64 or the DateTime
   represents a time later than the latest time that can be represented within the platform.

 These rules imply that the earliest and latest times that can be represented on a given platform are invalid date/time
 values and should be treated that way by applications.

</member>
        <member name="M:OpcUa_DateTime_GetTimeOfDay(_OpcUa_TimeVal*)">
  @brief Get the time in OpcUa_TimeVal format

  @return OpcUa_BadInvalidArgument if pValue is null
  @return OpcUa_Good on success

  @param pValue     [out]   Location of an OpcUa_TimeVal to store the time of day

</member>
        <member name="M:OpcUa_DateTime_GetStringFromDateTime(_OpcUa_DateTime!System.Runtime.CompilerServices.IsConst,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
  @brief Convert a date-time to a string

  @return OpcUa_BadInvalidArgument if buffer is null
  @return OpcUa_BadInvalidArgument if the buffer is too short
  @return OpcUa_Good on success

  @param DateTime   [in] Date-time to convert.
  @param pchBuffer  [bi] Byte buffer to store the result (at last 25 bytes long).
  @param uLength    [in] Length of the given buffer in bytes (at least 25).

</member>
        <member name="M:OpcUa_DateTime_GetDateTimeFromString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,_OpcUa_DateTime*)">
  @brief Convert a string to a date-time

  @return OpcUa_BadInvalidArgument if a_pchDateTimeString is null
  @return OpcUa_BadInvalidArgument if the string is incorrectly formatted
  @return OpcUa_Bad for other failures
  @return OpcUa_Good on success

  @param szDateTimeString  [in] String to convert
  @param pDateTime        [out] Location to store the date-time

</member>
        <member name="D:UaVariantObjects">
A template definition for arrays of UaVariantObjects 
</member>
        <member name="T:UaVariantException.Error">
@brief Enumeration of error definitions
</member>
        <member name="T:UaVariantException">
The UaVariantException class provides a base class
 *  for exceptions that can transferred across variants.
 *  @brief UaVariantException Class.

</member>
        <member name="T:UaVariant">
Wrapper class for the UA stack structure OpcUa_Variant

 Helper class for handling the OPC UA built-in data type Variant. It provides conversion and
 comparison functions and handles memory allocation and cleanup.

 The UaVariant class acts like a union for all OPC UA built-in data types.

</member>
        <member name="T:UaNumericRangeDimension.NumericRangeType">
NumericRange type enumeration 
</member>
        <member name="M:UaExpandedNodeId.serverIndex">
Get the server index.
     *  @return the server index.

</member>
        <member name="M:UaExpandedNodeId.namespaceUri">
Get the namespace URI.
     *  @return the namespace URI.

</member>
        <member name="M:UaExpandedNodeId.nodeId">
Get the actual node id.
     *  @return the actual node id.

</member>
        <member name="T:UaExpandedNodeId">
@ingroup CppBaseLibraryClass
 *  @brief Wrapper class for the UA stack structure OpcUa_ExpandedNodeId.

</member>
        <member name="T:UaExtensionObject.ExtensionObjectEncoding">
@brief Definition of the ExtensionObjectEncoding Enumeration
</member>
        <member name="T:UaExtensionObject">
Derived from OpcUa_ExtensionObject.

</member>
        <member name="T:UaGenericValue">
A class that serializes and deserializes data that is described by an UaStructureDefinition.
 *
 * The serialized data can be accessed by index or by field name.
 * The class can be used for DataTypes that are not registered to the stack.

</member>
        <member name="M:UaAbstractGenericValue.encode(UaAbstractEncoder*)">
Serializes the instance. 
</member>
        <member name="M:UaAbstractGenericValue.decode(UaAbstractDecoder*)">
Deserializes the instance. 
</member>
        <member name="M:UaAbstractGenericValue.definition">
Returns the UaStructureDefinition of the instance. 
</member>
        <member name="M:UaAbstractGenericValue.clear">
Clears the value. 
</member>
        <member name="T:UaAbstractGenericValue.Encoding">
The possible encodings for a UaAbstractGenericValue. 
</member>
        <member name="T:UaAbstractGenericValue">
\todo Add documentation 
</member>
        <member name="T:UaStructureDefinition">
The class describes a structured data type. 
</member>
        <member name="D:UaDiagnosticInfoRawArray">
An array of UaDiagnosticInfo 
</member>
        <member name="M:UaDiagnosticInfo.Dispose">
destruction 
</member>
        <member name="T:UaDiagnosticInfo">
@brief This class contains the diagnostic information in full format.
 *  It is not possible to create plain copies of this Class.

</member>
        <member name="M:UaStatus.pDiagnosticInfo">
Provides access to the optional DiagnosticInformation.
     * The returned pointer is NULL if there is no DiagnosticInformation available.

</member>
        <member name="T:UaStatus">
@brief This class handles status codes, conversions of the status code and diagnostic information.

The class is derived from \ref UaStatusCode and is used to combine the StatusCode with associated diagnostic information
in one object. The class \ref UaStatusCode encapsulated OPC UA data type StatusCodes and conversions from and to Classic OPC codes

See \ref UaStatusCode for StatusCode related documentation and functions.


</member>
        <member name="M:UaStatusCode.isSemanticsChanged">
Checks if the SemanticsChanged bit is set in the status code value. 
</member>
        <member name="M:UaStatusCode.setSemanticsChangedBit">
Sets the SemanticsChanged bit in the status code value. 
</member>
        <member name="M:UaStatusCode.isStructureChanged">
Checks if the StructureChanged bit is set in the status code value. 
</member>
        <member name="M:UaStatusCode.setStructureChangedBit">
Sets the StructureChanged bit in the status code value. 
</member>
        <member name="M:UaStatusCode.setOverflowBits">
Sets the DataValue bit in the InfoType and the Overflow bit in the InfoBits. 
</member>
        <member name="M:UaStatusCode.infoBits">
Gets the InfoBits part of the status code value 
</member>
        <member name="M:UaStatusCode.infoType">
Gets the InfoType part of the status code value 
</member>
        <member name="M:UaStatusCode.code">
Gets the code part (Severity + SubCode) of the status code value 
</member>
        <member name="M:UaStatusCode.statusCode">
Gets the full status code value 
</member>
        <member name="M:UaStatusCode.isNotBad">
Checks if the status code is not BAD 
</member>
        <member name="M:UaStatusCode.isBad">
Checks if the status code is BAD 
</member>
        <member name="M:UaStatusCode.isNotUncertain">
Checks if the status code is not UNCERTAIN 
</member>
        <member name="M:UaStatusCode.isUncertain">
Checks if the status code is UNCERTAIN 
</member>
        <member name="M:UaStatusCode.isNotGood">
Checks if the status code is not GOOD 
</member>
        <member name="M:UaStatusCode.isGood">
Checks if the status code is GOOD 
</member>
        <member name="T:UaStructureField">
\todo Add some documentation 
</member>
        <member name="M:UaDataTypeDictionary.enumDefinition(UaNodeId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
Returns the UaEnumDefinition for the specified data type. 
</member>
        <member name="T:UaDataTypeDictionary.DefinitionType">
Enumeration that indicates whether a UaEnumDefinition or a
   * UaStructureDefinition is available.

</member>
        <member name="T:UaDataTypeDictionary">
Base class for getting DataType information. 
</member>
        <member name="M:OpcUa_String_SafeAttachReadOnly(_OpcUa_String*,_OpcUa_String!System.Runtime.CompilerServices.IsConst*)">
 @brief Attaches a raw string to a string object.

 Attach a string to an OpcUa_String. (Works with OpcUa_String_FromCString() input strings).

 @param pDst [bi] The string to be set.
 @param pSrc [in] Can be OpcUa_String or OpcUa_StringA. RawString will be attached to pDst.

 @return Status code; @see opcua_statuscodes.h

</member>
        <member name="M:OpcUa_String_AttachWithOwnership(_OpcUa_String*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
 @brief Attaches a string to a string object.

 The string must be allocated with OpcUa_Alloc. The string object will free the string.

 @param pDst [out] The string object.
 @param pSrc [in]  The string being copied.

 @return Status code; @see opcua_statuscodes.h

</member>
        <member name="M:OpcUa_String_AttachCopy(_OpcUa_String*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
 @brief Attaches a copy of a string to a string object.

 The caller must ensure the string object is cleared before the string constant is deallocated.
 This call is generally used to assign static string constants to string objects.

 @param pDst [out] The string object.
 @param pSrc [in]  The string being copied.

 @return Status code; @see opcua_statuscodes.h

</member>
        <member name="M:OpcUa_String_AttachReadOnly(_OpcUa_String*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
The following functions are convencience functions for easy use only and call the above API only. *
 @brief Attaches a readonly reference for a string constant to a string object.

 @param pDst [out] The string object.
 @param pSrc [in]  The string being referenced.

 @return Status code; @see opcua_statuscodes.h

</member>
        <member name="M:OpcUa_String_StrSize(_OpcUa_String!System.Runtime.CompilerServices.IsConst*)">
 @brief Returns the size in bytes of the given OpcUa_String.

 @param pString [in] The string calculate the length of.

</member>
        <member name="M:OpcUa_String_StrLen(_OpcUa_String!System.Runtime.CompilerServices.IsConst*)">
 @brief Returns the length in character of the given OpcUa_String.

 @param pString [in] The string calculate the length of.

</member>
        <member name="M:OpcUa_String_StrnCat(_OpcUa_String*,_OpcUa_String!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
 @brief Appends a string to another string.

 to simulate a strcat() pass OpcUa_StringLenDontCare as a_uLength
 
 @param pDestString       [in/out] The string to append to (must be OpcUa_String).
 @param pSrcString        [in]     The string to append (can also be OpcUa_StringA).
 @param uLength           [in]     The maximum number of characters to copy.

</member>
        <member name="M:OpcUa_String_StrnCpy(_OpcUa_String*,_OpcUa_String!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
 @brief Copies a string (maximum bytes of the given len).

 to simulate a strcpy() pass OPCUA_STRING_LENDONTCARE as a_uLength

 @param pDestString   [out]    The copy of the string (must be OpcUa_String).
 @param pSrcString    [in]     The string to copy (can also be OpcUa_StringA).
 @param uLength       [in]     The number of characters to copy.

</member>
        <member name="M:OpcUa_String_IsNull(_OpcUa_String!System.Runtime.CompilerServices.IsConst*)">
 @brief Determine if the string is null (nonexistent -&gt; initialize OpcUa_String).

 @param pString [bi] Pointer to the OpcUa_String to be checked.

</member>
        <member name="M:OpcUa_String_IsEmpty(_OpcUa_String!System.Runtime.CompilerServices.IsConst*)">
 @brief Determine if the string is empty (length zero).

 @param pString [bi] Pointer to the OpcUa_String to be checked.

</member>
        <member name="M:OpcUa_String_GetRawString(_OpcUa_String!System.Runtime.CompilerServices.IsConst*)">
 @brief Get a direct pointer to the internal UTF-8 string.

 @param pString [bi] Pointer to the OpcUa_String to get the raw content from.

</member>
        <member name="M:OpcUa_String_Clear(_OpcUa_String*)">
 @brief Frees all internal resources occupied by a OpcUa_String.

 @param pString [bi] Pointer to the OpcUa_String to be cleared.

</member>
        <member name="M:OpcUa_String_Delete(_OpcUa_String**)">
 @brief Deletes all resources occupied by a OpcUa_String including the OpcUa_String itself.

 @param ppString [bi] Pointer to the OpcUa_String to be deleted. Set to OpcUa_Null after the call.

</member>
        <member name="M:OpcUa_String_AttachToString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte,System.Byte,_OpcUa_String*)">
 @brief Allocates memory for a string of uLength bytes length when a_bDoCopy is true.

 @param strSource    [in] The value of the created string.
 @param uLength      [in] Length of string to be created. (OPCUA_STRINGLENZEROTERMINATED Use length of source, must be zero terminated)
 @param uBufferSize  [in] Length of string buffer to be created. (usefull if larger than uLength)
 @param bDoCopy      [in] OpcUa_True: Copy the source string; else: reference it (mind the next parameter!).
 @param bFreeOnClear [in] OpcUa_True: Free the Source string if string gets cleared (only effective, if bDoCopy == OpcUa_False!).
 @param pString      [bi] Pointer to the manipulated string.

 @return Status code; @see opcua_statuscodes.h

</member>
        <member name="M:OpcUa_String_CreateNewString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte,System.Byte,_OpcUa_String**)">
 @brief Allocates memory for a string of uLength bytes length.

 @param strSource     [in]  The value of the created string.
 @param uLength       [in]  Length of string to be created. (OPCUA_STRINGLENZEROTERMINATED Use length of source, must be zero terminated)
 @param uBufferSize   [in] Length of string buffer to be created. (usefull if larger than uLength)
 @param bDoCopy       [in]  OpcUa_True: Copy the source string; else: reference it.
 @param bFreeOnClear  [in]  OpcUa_True: Free the Source string if string gets cleared (only effective, if bDoCopy == OpcUa_False!).
 @param ppNewString   [out] Pointer to the new string.

 @return Status code; @see opcua_statuscodes.h

</member>
        <member name="M:OpcUa_String_Initialize(_OpcUa_String*)">
 @brief Initializes a string Structure.

 @param pString [out] Pointer to the new string.

 @return Status code; @see opcua_statuscodes.h

</member>
        <member name="M:OpcUa_StringA_snprintf(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,BTEllipsis)">
 @brief .

 @param

 @return Status code; @see opcua_statuscodes.h

</member>
        <member name="M:OpcUa_StringA_vsnprintf(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
 @brief .

 @param

 @return Status code; @see opcua_statuscodes.h

</member>
        <member name="M:OpcUa_String_FromCString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*)">
@brief Used as length for n-operations to work with full length source strings.

</member>
        <member name="M:OpcUa_Memory_MemCpy(System.Void*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Void!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
 @brief Copies a block of memory.

 @param pBuffer      [in] The destination memory block.
 @param nSizeInBytes [in] The size of the destination memory block. 
 @param pSource      [in] The memory block being copied.
 @param nCount       [in] The number of bytes to copy.

 @return StatusCode:
   OpcUa_BadInvalidArgument if Buffer or Source equals OpcUa_Null;
   OpcUa_BadOutOfRange      if number of bytes to copy greater nSizeInBytes

</member>
        <member name="M:OpcUa_Memory_Free(System.Void*)">
 @brief Frees a block of memory.

 @param pvBuffer [in] The existing memory block.

</member>
        <member name="M:OpcUa_Memory_ReAlloc(System.Void*,System.UInt32!System.Runtime.CompilerServices.IsLong)">
 @brief Reallocates a block of memory

 @param pBuffer [in] The existing memory block.
 @param nSize   [in] The size of the block to allocate.

</member>
        <member name="M:OpcUa_Memory_Alloc(System.UInt32!System.Runtime.CompilerServices.IsLong)">
 @brief Allocates a new block of memory.

 @param nSize [in] The size of the block to allocate.

</member>
        <member name="M:UaLocalizedText.text">
Get the text string.
     *  @return the text string.

</member>
        <member name="M:UaLocalizedText.locale">
Get the locale string.
     *  @return the locale string.

</member>
        <member name="T:UaLocalizedText">
@ingroup CppBaseLibraryClass
 *  @brief Wrapper class for the UA stack structure OpcUa_LocalizedText.

</member>
        <member name="T:UaQualifiedName">
@ingroup CppBaseLibraryClass
 *  @brief Wrapper class for the UA stack structure OpcUa_QualifiedName.
 *  Qualified names are two-part names: namespace index (UInt16) and name (String).
 *  The name part of QualifiedNames is restricted to 512 characters.
 *  Derived from OpcUa_QualifiedName.

</member>
        <member name="T:UaNodeId">
@ingroup CppBaseLibraryClass
 @brief Wrapper class for the UA stack structure OpcUa_NodeId

 Helper class for handling the OPC UA built-in data type NodeId. It provides conversion and
 comparison functions and handles memory allocation and cleanup.

 The NodeId data type is a structure with the following elements
 Name           | Type   | Description
 ---------------|--------|------------------------------------------------------------------
 namespaceIndex | UInt16 | The index for a namespace URI used in an OPC UA server
 identifierType | enum   | The format and data type of the identifier
 identifier     | *      | The identifier for a node in the address space of an OPC UA server

 The namespace is a URI that identifies the naming authority responsible for assigning the identifier element of the NodeId.
 Naming authorities include the local server, the underlying system, standards bodies, and consortia. It is expected that most
 nodes will use the URI of the server or of the underlying system.

 Using a namespace URI allows multiple OPC UA servers attached to the same underlying system to use the same identifier to identify
 the same object. This enables clients that connect to those Servers to recognise Objects that they have in common. The namespace URI is case sensitive.
 Namespace URIs are identified by numeric values in OPC UA services to permit more efficient transfer and processing
 (e.g. table lookups). The numeric values used to identify namespaces correspond to the index into the NamespaceArray. The NamespaceArray
 is a variable that is part of the Server object in the address space.

 The URI for the OPC UA namespace is â€œhttp://opcfoundation.org/UA/â€. Its corresponding index in the namespace table is 0.

 The following IdentifierTypes are available:
 Value                        | Description
 -----------------------------|--------------------------------------------
 OpcUa_IdentifierType_Numeric | Numeric value
 OpcUa_IdentifierType_String  | String value
 OpcUa_IdentifierType_Guid    | Globally Unique Identifier
 OpcUa_IdentifierType_Opaque  | Namespace specific format in a ByteString

 Normally the scope of NodeIds is the server in which they are defined. For certain types of NodeIds, NodeIds can uniquely identify
 a Node within a system, or across systems (e.g. GUIDs). System-wide and globally-unique identifiers allow clients to track Nodes, such
 as work orders, as they move between OPC UA servers as they progress through the system.

 String identifiers are case sensitive. That is, clients shall consider them case sensitive. Servers are allowed to provide alternative
 NodeIds and using this mechanism severs can handle NodeIds as case insensitive.

 The identifier value element is used within the context of the first two elements to identify a node. Its data type and format is defined by the identifierType.

 Identifier values of IdentifierType STRING are restricted to 4096 characters. Identifier values of IdentifierType OPAQUE are restricted to 4096 bytes.

 A null NodeId has special meaning. For example, many services define special behaviour if a null NodeId is passed as a parameter.
 A node in the address space cannot have a null NodeId.

 UaNodeId uses implicit sharing to avoid needless copying and to boost the performance.
 Only if you modify a shared NodeId it creates a copy for that (copy-on-write).
 So assigning another UaNodeId or passing it as parameter is as fast as assigning a pointer.

</member>
        <member name="T:UaGuid">
@ingroup CppBaseLibraryClass
 @brief Wrapper class for the UA stack structure OpcUa_Guid

 Helper class for handling the OPC UA built-in data type Guid. It provides conversion and
 comparison functions and allows creation of a Guid.

 Using Globally Unique IDentifiers (GUID) is a standard way to globally identify
 entities in a distributed computing environment. It is a 128-bit value.

</member>
        <member name="M:op_LeftShift(UaDataStream*!System.Runtime.CompilerServices.IsImplicitlyDereferenced,UaString!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)">
define UaDataStream operators for UaString. 
</member>
        <member name="T:UaString">
@ingroup CppBaseLibraryClass
 @brief Wrapper class for the UA stack structure OpcUa_String

 Helper class for handling the OPC UA built-in data type String. It provides conversion,
 comparison and string creation functions and handles memory allocation and clean-up.

 The OPC UA built-in data type String defines a Unicode character string that should exclude control characters that are not
 white-spaces (0x00 - 0x08, 0x0E-0x1F or 0x7F). All String values are encoded as a sequence of UTF8 characters. Therefore the
 internal representation is using the wire format to avoid data copying.

 Since the internal representation of a String in the class UaString is UTF8 encoded, the class does not provide string manipulation
 functions. The class #UaUniString provides string manipulation functions. The necessary conversion to UTF-16 is provided by #toUtf16.
 The native string can be extracted as char* with #toUtf8.

 @code
 UaString myString("This is the string to process");

 UaUniString myTempString(myString.toUtf16());
 myTempString.replace("string", "text");

 myString = myTempString.toUtf16();

 printf("%s", myString.toUtf8());

 // Output is "This is the text to process"
 @endcode

 A string can be created with #arg, appended with #operator+ and #operator+= and created from different string formats and a #number.

 @code
 UaString myString;
 UaString sTemp("variable string");
 int iTemp = 5;

 // Create the string "5 times variable string" from variables
 myString = UaString::number(iTemp);
 myString += " times ";
 myString += sTemp;

 // The following option is more efficient
 myString = UaString("%1 times %2").arg(iTemp).arg(sTemp);
 @endcode

 UaString uses implicit sharing to avoid needless copying and to boost the performance.
 Only if you modify a shared string it creates a copy for that (copy-on-write).
 So assigning another UaString or passing it as parameter needs constant time is nearly as fast as assigning a pointer.

</member>
        <member name="T:UaByteRef">
UaByteRef
 *  @brief Helper class for modifying UaByteArray elements.

</member>
        <member name="M:UaByteArray.op_Subscript(System.UInt32)">
This function is provided for convenience and behaves like the function above.
    *  @see operator[](int i)


This function is provided for convenience and behaves like the function above.
 *  @see operator[](int i)
 *  @param i a variable to compare with.
 *  @return ByteRef reference.

</member>
        <member name="M:UaByteArray.op_Subscript(System.Int32)">
This function is provided for convenience and behaves like the function above.
    *  @see operator[](int i)

</member>
        <member name="T:UaByteArray">
@ingroup CppBaseLibraryClass
 *  @brief The UaByteArray handles the access to an array of bytes.
 *  UaByteArray can be used to store both raw bytes (including \\0s) and traditional 8-bit \\0-terminated strings.
 *  Using UaByteArray is much more convenient than using const char *.
 *  Behind the scenes, it always ensures that the data is followed by a \\0 terminator,
 *  and uses implicit sharing (copy-on-write) to reduce memory usage and avoid needless copying of data.
 *  You don't need to care about resizing or cleaning up the memory.

</member>
        <member name="M:UaByteString.data">
Get the data of the actual variable.
     *  @return the data of the actual variable.

</member>
        <member name="M:UaByteString.length">
Get the length of the var.
     *  @return the length of the var.

</member>
        <member name="T:UaByteString">
@ingroup CppBaseLibraryClass
 *  @brief Wrapper class for the UA stack structure OpcUa_ByteString.
 *  Derived from OpcUa_ByteString.

</member>
        <member name="M:UaChar.size">
Get the actual size.
     *  @return the actual size.

</member>
        <member name="T:UaChar">
@ingroup CppBaseLibraryClass
 *  @brief Helper class for modifying UaChar elements.
 *  The UaChar class provides a 16-bit Unicode character.
 *  It is lightweight, so it can be used everywhere.

</member>
        <member name="M:OpcUa_Guid_Copy(_OpcUa_Guid*,_OpcUa_Guid**)">
  @brief Copies a guid.

  @param pSource        [in] The guid to copy.
  @param ppDestination  [bi] The guid to change.

</member>
        <member name="M:OpcUa_Guid_IsNull(_OpcUa_Guid*)">
  @brief Returns true if the guid is a null guid.

  @param pGuid [in] The guid to test.

</member>
        <member name="M:OpcUa_Guid_IsEqual(_OpcUa_Guid*,_OpcUa_Guid*)">
  @brief Returns true if the two guids are equal.

  @param pGuid1 [in] The first guid to compare.
  @param pGuid2 [in] The second guid to compare.

</member>
        <member name="M:OpcUa_Guid_ToString(_OpcUa_Guid*,_OpcUa_String**)">
  @brief Converts a binary representation of a GUID to a newly created OpcUa_String.

  @param pGuid   [in]  The binary representation.
  @param pszText [out] The string representation.

</member>
        <member name="M:OpcUa_Guid_ToStringA(_OpcUa_Guid*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*)">
  @brief Converts a binary representation of a GUID to a UTF-8 representation.

  @param pGuid  [in] The binary representation.
  @param szText [bi] The string representation.

</member>
        <member name="M:OpcUa_Guid_FromString(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,_OpcUa_Guid*)">
  @brief Converts a UTF-8 string representation of a GUID to a binary representation.

  @param szText  [in] The string representation.
  @param pGuid  [out] The binary representation.

</member>
        <member name="M:OpcUa_Guid_Create(_OpcUa_Guid*)">
  @brief Creates a new GUID.

  @param pGuid [bi] The buffer to store the new GUID in.

</member>
        <member name="F:OpcUa_Guid_Null">
@brief An empty GUID.

</member>
        <member name="M:OpcUa_ProxyStub_GetStaticConfigString">
Request the string encoded built configuration of the stack.
  * @return Pointer to a static string containing the options set by compiler switches. Must not be freed!

</member>
        <member name="M:OpcUa_ProxyStub_GetConfigString">
Request the string encoded configuration table.
  * @return Pointer to a buffer containing the configuration string. Must not be freed!

</member>
        <member name="M:OpcUa_ProxyStub_GetVersion">
Request the version string of the proxy stub.
  * @return Pointer to a static buffer containing the version information in string format. Must not be freed!

</member>
        <member name="M:OpcUa_ProxyStub_SetNamespaceUris(System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte**,System.Byte)">
Set namespace URI table.
  * @param a_psNamespaceUris [in] Array of pointers to namespace URIs with OpcUa_Null as last element.
  * @param a_bMakeCopy       [in] Copy strings instead of only referencing them.

</member>
        <member name="M:OpcUa_ProxyStub_AddTypes(_OpcUa_EncodeableType**)">
Add additional types to the known types table.
  * @param ppTypes [in] Array of pointers to vendor types with OpcUa_Null as last element.

</member>
        <member name="M:OpcUa_ProxyStub_Clear">
Clean up proxy stub library. 
</member>
        <member name="M:OpcUa_ProxyStub_ReInitialize(_OpcUa_ProxyStubConfiguration*)">
Set a new proxy stub configuration. Not thread-safe! 
</member>
        <member name="M:OpcUa_ProxyStub_Initialize(_OpcUa_ProxyStubConfiguration*)">
Initialize proxy stub library. 
</member>
        <member name="F:_OpcUa_ProxyStubConfiguration.bTcpStream_ExpectWriteToBlock">
The network stream should block if not all could be send in one go. Be careful and use this only with client threads. Must not work with all platform layers. 
</member>
        <member name="F:_OpcUa_ProxyStubConfiguration.iTcpTransport_MaxChunkCount">
The default and maximum number of message chunks per message in the server. Affects memory usage. 
</member>
        <member name="F:_OpcUa_ProxyStubConfiguration.iTcpTransport_MaxMessageLength">
The default and maximum size for messages in the server. Affects memory usage. 
</member>
        <member name="F:_OpcUa_ProxyStubConfiguration.iTcpConnection_DefaultChunkSize">
The default (and requested) size for message chunks. Affects network performance and memory usage. 
</member>
        <member name="F:_OpcUa_ProxyStubConfiguration.iTcpListener_DefaultChunkSize">
The default and maximum size for message chunks in the server. Affects network performance and memory usage. 
</member>
        <member name="F:_OpcUa_ProxyStubConfiguration.bTcpListener_ClientThreadsEnabled">
If true, the TcpListener request a thread per client from the underlying socketmanager. Must not work with all platform layers. 
</member>
        <member name="F:_OpcUa_ProxyStubConfiguration.uSecureListener_ThreadPool_Timeout">
If the add operation blocks on a full job queue, this value sets the max waiting time. 
</member>
        <member name="F:_OpcUa_ProxyStubConfiguration.bSecureListener_ThreadPool_BlockOnAdd">
If MaxJobs is reached the add operation can block or return an error. 
</member>
        <member name="F:_OpcUa_ProxyStubConfiguration.iSecureListener_ThreadPool_MaxJobs">
The length of the queue with jobs waiting for a free thread. 
</member>
        <member name="F:_OpcUa_ProxyStubConfiguration.iSecureListener_ThreadPool_MaxThreads">
The maximum number of threads in the thread pool 
</member>
        <member name="F:_OpcUa_ProxyStubConfiguration.iSecureListener_ThreadPool_MinThreads">
The minimum number of threads in the thread pool. 
</member>
        <member name="F:_OpcUa_ProxyStubConfiguration.bSecureListener_ThreadPool_Enabled">
Be careful! Enabling the threadpool has severe implications on the behavior of your server! 
Controls wether the secure listener uses a thread pool to dispatch received requests. 
</member>
        <member name="F:_OpcUa_ProxyStubConfiguration.iSerializer_MaxMessageSize">
The maximum number of bytes per message in total. 
</member>
        <member name="F:_OpcUa_ProxyStubConfiguration.iSerializer_MaxArrayLength">
Maximum number of elements in an array accepted by the serializer. 
</member>
        <member name="F:_OpcUa_ProxyStubConfiguration.iSerializer_MaxByteStringLength">
The largest byte string accepted by the serializer. 
</member>
        <member name="F:_OpcUa_ProxyStubConfiguration.iSerializer_MaxStringLength">
The largest string accepted by the serializer. 
</member>
        <member name="F:_OpcUa_ProxyStubConfiguration.iSerializer_MaxAlloc">
Security constraints for the serializer. Set this values carefully. 
The largest size for a memory block the serializer can do when deserializing a message. 
</member>
        <member name="F:_OpcUa_ProxyStubConfiguration.uProxyStub_Trace_Level">
Configure the level of messages traced. See config.h for values. 
</member>
        <member name="F:_OpcUa_ProxyStubConfiguration.bProxyStub_Trace_Enabled">
Globally enable/disable trace output from the stack (exclude platformlayer) 
</member>
        <member name="T:_OpcUa_ProxyStubConfiguration">
Holds the runtime configuration values for the proxy stub modules.  
    There may be some interference with the endpoint configuration at this time. 
    Negative numeric values mean to use default values. 
</member>
        <member name="M:OpcUa_EncodeableObject_Decode(_OpcUa_EncodeableType!System.Runtime.CompilerServices.IsConst*,_OpcUa_InputStream*,_OpcUa_StringTable*,System.Void*)">
  @brief Decode object of specified encodeable object type from input stream into given memory.

  @param pObjectType    [ in]   Type of the object to decode.
  @param pInputStream   [ in]   Stream with encoded object.
  @param pNamespaceUris [ in]   Current namespaces.
  @param pObject        [out]   Destination buffer.

</member>
        <member name="M:OpcUa_EncodeableObject_Encode(_OpcUa_EncodeableType!System.Runtime.CompilerServices.IsConst*,System.Void*,_OpcUa_StringTable*,_OpcUa_OutputStream*)">
  @brief Encode object of specified encodeable object type into output stream.

  @param pObjectType    [ in]   Type of the object to encode.
  @param pObject        [ in]   The object.
  @param pNamespaceUris [ in]   Current namespaces.
  @param pOutputStream  [out]   The destination stream.

</member>
        <member name="M:OpcUa_EncodeableObject_ParseExtension(_OpcUa_ExtensionObject*,_OpcUa_MessageContext*,_OpcUa_EncodeableType*,System.Void**)">
  @brief Extracts an encodeable object from an extension object.

  @param pExtension         [in]     The extension object to parse.
  @param pContext           [in]     The message context to use during parsing.
  @param pType              [in]     The type of object to extract. 
  @param ppEncodeableObject [in/out] Pointer to the encodeable object.

</member>
        <member name="M:OpcUa_EncodeableObject_CreateExtension(_OpcUa_EncodeableType*,_OpcUa_ExtensionObject*,System.Void**)">
  @brief Creates an Encodeable Object at the given ExtensionObject.

  @param pType              [in]     The type of the object. 
  @param pExtension         [in/out] The extension object to which the encodeable object gets attached.
  @param ppEncodeableObject [in/out] Pointer to the encodeable object.

</member>
        <member name="M:OpcUa_EncodeableObject_Delete(_OpcUa_EncodeableType*,System.Void**)">
  @brief Deletes an encodeable object.

  @param pType        [in]     The type of the object. 
  @param ppEncodeable [in/out] The encodeable object.

</member>
        <member name="M:OpcUa_EncodeableObject_Create(_OpcUa_EncodeableType*,System.Void**)">
  @brief Creates and initializes an encodeable object.

  @param pType        [in]  The type of the object to create. 
  @param ppEncodeable [out] The new encodeable object.

</member>
        <member name="M:OpcUa_EncodeableTypeTable_Find(_OpcUa_EncodeableTypeTable*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,_OpcUa_EncodeableType**)">
  @brief Finds a encodeable object type in a table.

  @param pTable        [in]  The table to search.
  @param nTypeId       [in]  The type identifier for the encodeable object.
  @param sNamespaceUri [in]  The namespace uri that qualifies the type identifier.
  @param ppType        [out] The matching encodeable object type.

</member>
        <member name="M:OpcUa_EncodeableTypeTable_AddTypes(_OpcUa_EncodeableTypeTable*,_OpcUa_EncodeableType**)">
  @brief Populates and sorts an encodeable object type table.

  The new types are added to the table if it has already contains types.
 
  @param pTable  [in] The table to update.
  @param ppTypes [in] A null terminated list of encodeable object types.

</member>
        <member name="M:OpcUa_EncodeableTypeTable_Delete(_OpcUa_EncodeableTypeTable*)">
  @brief Clears an encodeable object type table.
 
  @param pTable [in] The table to clear.

</member>
        <member name="M:OpcUa_EncodeableTypeTable_Create(_OpcUa_EncodeableTypeTable*)">
  @brief Initializes an encodeable object type table.
 
  @param pTable [in] The table to clear.

</member>
        <member name="T:_OpcUa_EncodeableTypeTable">
@brief A table of encodeable object types.

</member>
        <member name="M:OpcUa_EncodeableType_Compare(_OpcUa_EncodeableType!System.Runtime.CompilerServices.IsConst*,_OpcUa_EncodeableType!System.Runtime.CompilerServices.IsConst*)">
  @brief Compares two Encodeable Types and returns 0 if they are equal.

  @param pType1 [in]  First operand.
  @param pType2 [in]  Second operand.

  @return

</member>
        <member name="T:_OpcUa_EncodeableType">
@brief Describes an encodeable object.

</member>
        <member name="D:OpcUa_EncodeableObject_PfnCopyTo">
  @brief Copies content of an encodeable object to another.
 
  @param pSource [in] The source object.
  @param pValue  [in] The copy of the source object.

</member>
        <member name="D:OpcUa_EncodeableObject_PfnCopy">
  @brief Creates a copy of an encodeable object.
 
  @param pSource [in] The source object.
  @param pCopy   [in] The created copy of the source object.

</member>
        <member name="D:OpcUa_EncodeableObject_PfnCompare">
  @brief Compares two encodeable object.
 
  @param pValue1 [in] The first operand.
  @param pValue2 [in] The second operand.

</member>
        <member name="D:OpcUa_EncodeableObject_PfnDecode">
  @brief Decodes an encodeable object.
 
  @param pDecoder [in] The decoder used to deserialize the object.
  @param pValue   [in] The object to decode.

</member>
        <member name="D:OpcUa_EncodeableObject_PfnEncode">
  @brief Encodes an encodeable object.
 
  @param pEncoder [in] The encoder used to serialize the object.
  @param pValue   [in] The object to encode.

</member>
        <member name="D:OpcUa_EncodeableObject_PfnGetSize">
  @brief Calculates the size the serialized form an encodeable object.

  Returns Bad_NotSupported if it is not possible to calculate the size.
 
  @param pValue   [in]  The object to encode.
  @param pEncoder [in]  The encoder used to serialize the object.
  @param pSize    [out] The size of the encoded object in bytes.

</member>
        <member name="D:OpcUa_EncodeableObject_PfnClear">
  @brief Clear an encodeable object.

  This function must free all memory referenced by the object and set it to a known state.
 
  @param pValue [in] The encodeable object to clear.

</member>
        <member name="D:OpcUa_EncodeableObject_PfnInitialize">
  @brief Initializes an encodeable object.

  This function should set the object to a known state. It should not allocate memory.
 
  @param pValue [in] The encodeable object to initialize.

</member>
        <member name="T:_OpcUa_StatusCodeString">
@brief use this to eliminate "unused parameter" warnings 
</member>
        <member name="M:OpcUa_P_GetConfigString">
@brief Get config information as string from static buffer. Must not be freed! 
</member>
        <member name="M:OpcUa_P_GetVersion">
@brief Get version information as string from static buffer. Must not be freed! 
</member>
        <member name="M:OpcUa_P_Clean">
@brief Platform layer clean up. 
</member>
        <member name="M:OpcUa_P_Initialize">
@brief Platform layer initialization. 
</member>
        <member name="D:OpcUa_Socket_CertificateCallback">
@brief Function prototype for receiving event callbacks from the socket module. 
</member>
        <member name="D:OpcUa_Socket_EventCallback">
@brief returned on error, where other type than statuscode is used (write). 
@brief maximum time to wait for a send operation to complete. 
These types of events can be sent to the registered callback function from the socket.
The receiver can register to them has to react on this events.

@brief Events which are set outside the event loop. (external events) 
@brief SocketManager behaviour control. 
@brief PeerInfo settings 
@brief Function prototype for receiving event callbacks from the socket module. 
</member>
        <member name="D:OpcUa_P_TraceHook">
@brief Trace hook function type. 
</member>
        <member name="D:OpcUa_P_Timer_Callback">
@brief Function prototype for receiving callbacks from the timer module. 
</member>
        <member name="D:OpcUa_RawThread">
@brief Primary file name and path. 
@brief Secondary file name and path. Primary file gets copied to this location
           every OPCUA_P_TRACE_G_MAX_FILE_ENTRIES. 
@brief Maximum number of trace lines per file. 
@brief If OPCUA_CONFIG_YES, servers will IPv6 addresses for binding 
@brief If OPCUA_CONFIG_YES, clients will connect to IPv6 addresses first. 
@brief Use localhost instead of the hostname in the URL if it matches the name of the local host. Forces use of loopback address. NO is old behavior. 
@brief Explicitly accept selfsigned certificates if set to OPCUA_CONFIG_YES. 
@brief If true, screen content will be used to initialize the OpenSSL PRNG. 
@brief If true, the TCP keep alive mechanism is used in servers to detect broken socket connections. 
@brief Use an windows API which allows a  per socket setting of TCP keep alive parameters instead of setsockopt. 
@brief milliseconds with no activity until the first keep-alive packet is sent 
@brief milliseconds between when successive keep-alive packets are sent if no ack is received 
@brief The maximum number of socket managers in multithreading config, supported by the socket module. 
@brief The maximum number of sockets supported by a socket manager. 
@brief Removes the global pointer array OpcUa_P_Socket_g_pSocketManagers which is no longer necessary 
@brief Toggle SSL support in the socket manager class. 
@brief if SSL_VERIFY_NONE, server won't request client certificates; else use SSL_VERIFY_PEER | SSL_VERIFY_FAIL_IF_NO_PEER_CERT 
@brief Override OpenSSL builtin verification function - not recommended! 
@brief Invoke postverification callback. 
@brief Set thread stack size to this value (0 for default) 
@brief The number of timers available to the system. 
@brief The handle for the platform thread. 
</member>
        <member name="M:OpcUa_PKIProvider_SplitCertificateChain(_OpcUa_PKIProvider*,_OpcUa_ByteString!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong*,_OpcUa_ByteString**)">
  @brief Splits certificate chain into its elements.

  The returned byte strings reference the memory blocks in the input parameter.
  The data pointers become invalid if the chain is freed! Also, freeing the memory
  referenced by the chain elements is not allowed!

  @param a_pPKI                   [in]  The PKI provider handle.
  @param a_pCertificateChain      [in]  Byte string consisting of concatenated DER certificates.

  @param a_pNumberOfChainElements [out] Number of certificates found in the chain.
  @param a_pabyChainElements      [out] Array of byte strings referencing certificates in pCertificateChain (don't free contents).

</member>
        <member name="D:OpcUa_PKIProvider_PfnSplitCertificateChain">
  @brief Splits certificate chain into its elements.

  The returned byte strings reference the memory blocks in the input parameter.
  The data pointers become invalid if the chain is freed! Also, freeing the memory
  referenced by the chain elements is not allowed!

  @param pCertificateChain      [in]  Byte string consisting of concatenated DER certificates.

  @param pNumberOfChainElements [out] Number of certificates found in the chain.
  @param pabyChainElements      [out] Array of byte strings referencing certificates in pCertificateChain (don't free contents).

</member>
        <member name="M:OpcUa_PKIProvider_SavePrivateKeyToFile(_OpcUa_PKIProvider*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,_OpcUa_P_FileFormat,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,_OpcUa_ByteString!System.Runtime.CompilerServices.IsConst*)">
  @brief Add given private key data to store.

  @param a_pPKI               [in]  The PKI provider handle.
  @param a_StoreLocation      [in]  The storage location depending on implementation (i.e. file name).
  @param a_Format             [in]  The destination format (OpcUa_Crypto_Encoding_*)
  @param a_password           [in]  Optional password.
  @param a_pPrivateKey        [in]  Private key data.

</member>
        <member name="D:OpcUa_PKIProvider_PfnSavePrivateKeyToFile">
  @brief Add given private key data to store.

  @param storeLocation      [in]  The storage location depending on implementation (i.e. file name).
  @param format             [in]  The destination format (OpcUa_Crypto_Encoding_*)
  @param password           [in]  Optional password.
  @param pPrivateKey        [in]  Private key data.

</member>
        <member name="M:OpcUa_PKIProvider_LoadPrivateKeyFromFile(_OpcUa_PKIProvider*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,_OpcUa_P_FileFormat,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,_OpcUa_ByteString*)">
  @brief frees a certificate store object.

  @param pProvider             [in]  The crypto provider handle.

  @param pCertificateStore     [out] The certificate store object.

</member>
        <member name="D:OpcUa_PKIProvider_PfnLoadPrivateKeyFromFile">
  @brief frees a certificate store object.

  @param pProvider             [in]  The crypto provider handle.

  @param pCertificateStore     [out] The certificate store object.

</member>
        <member name="M:OpcUa_PKIProvider_CloseCertificateStore(_OpcUa_PKIProvider*,System.Void**)">
  @brief frees a certificate store object.

  @param pProvider             [in]  The crypto provider handle.

  @param pCertificateStore     [out] The certificate store object.

</member>
        <member name="D:OpcUa_PKIProvider_PfnCloseCertificateStore">
  @brief frees a certificate store object.

  @param pProvider             [in]  The crypto provider handle.

  @param pCertificateStore     [out] The certificate store object.

</member>
        <member name="M:OpcUa_PKIProvider_LoadCertificate(_OpcUa_PKIProvider*,System.Void*,System.Void*,_OpcUa_ByteString*)">
  @brief imports a given certificate into given certificate store.
 
  @param pPKI                     [in]  The PKI handle.
  @param pCertificate             [in]  The certificate that should be imported.
  @param pCertificateStore        [in]  The certificate store that should store the passed in certificate.

  @param pCertificateIndex        [out] The index that indicates the store location of the certificate within the certificate store.

</member>
        <member name="D:OpcUa_PKIProvider_PfnLoadCertificate">
  @brief imports a given certificate into given certificate store.
 
  @param pPKI                     [in]  The pki handle.
  @param pCertificate             [in]  The certificate that should be imported.
  @param pCertificateStore        [in]  The certificate store that should store the passed in certificate.

  @param pCertificateIndex        [out] The index that indicates the store location of the certificate within the certificate store.

</member>
        <member name="M:OpcUa_PKIProvider_SaveCertificate(_OpcUa_PKIProvider*,_OpcUa_ByteString!System.Runtime.CompilerServices.IsConst*,System.Void*,System.Void*)">
  @brief imports a given certificate into given certificate store.
 
  @param pPKI                     [in]  The PKI handle.
  @param pCertificate             [in]  The certificate that should be imported.
  @param pCertificateStore        [in]  The certificate store that should store the passed in certificate.

  @param pCertificateIndex        [in/out] The index that indicates the store location of the certificate within the certificate store.

</member>
        <member name="D:OpcUa_PKIProvider_PfnSaveCertificate">
  @brief imports a given certificate into given certificate store.

  @param pPKI                     [in]  The pki handle.
  @param pCertificate             [in]  The certificate that should be imported.
  @param pCertificateStore        [in]  The certificate store that should store the passed in certificate.

  @param pCertificateIndex        [int/out] The index that indicates the store location of the certificate within the certificate store.

</member>
        <member name="M:OpcUa_PKIProvider_OpenCertificateStore(_OpcUa_PKIProvider*,System.Void**)">
  @brief Creates a certificate store object.

  @param pPKI                         [in]  The PKI handle.
  
  @param ppCertificateStore           [out] The handle to the certificate store.

</member>
        <member name="D:OpcUa_PKIProvider_PfnOpenCertificateStore">
  @brief Creates a certificate store object.

  @param pPKI                         [in]  The pki handle.
  
  @param ppCertificateStore           [out] The handle to the certificate store.

</member>
        <member name="M:OpcUa_PKIProvider_ValidateCertificate(_OpcUa_PKIProvider*,_OpcUa_ByteString!System.Runtime.CompilerServices.IsConst*,System.Void*,System.Int32*)">
  @brief Validates a given X509 certificate object.
 
   Validation:
   - Subject/Issuer
   - Path
   - Certificate Revocation List (CRL)
   - Certificate Trust List (CTL)

  @param pPKI                     [in]  The pki handle.
  @param pCertificate             [in]  The certificate that should be validated.(DER encoded ByteString)
  @param pCertificateStore        [in]  The certificate store that validates the passed in certificate.

  @param pValidationCode          [out] The validation code, that gives information about the validation result.

</member>
        <member name="D:OpcUa_PKIProvider_PfnValidateCertificate">
  @brief Validates a given X509 certificate object.

   Validation:
   - Subject/Issuer
   - Path
   - Certificate Revocation List (CRL)
   - Certificate Trust List (CTL)

  @param pPKI                     [in]  The pki handle.
  @param pCertificate             [in]  The certificate that should be validated. (DER encoded ByteString)
  @param pCertificateStore        [in]  The certificate store that validates the passed in certificate.

  @param pValidationCode          [out] The validation code, that gives information about the validation result.

</member>
        <member name="M:OpcUa_CertificateStoreConfiguration_Delete(_OpcUa_CertificateStoreConfiguration**)">
  @brief Frees all memory referenced directly and indirectly by ppConfiguration.

  @param ppConfiguration    [bi] Pointer to future configuration object. Null on return.

</member>
        <member name="M:OpcUa_CertificateStoreConfiguration_Clear(_OpcUa_CertificateStoreConfiguration*)">
  @brief Frees all memory referenced from pConfiguration.

  @param pConfiguration    [in] Pointer to configuration object.

</member>
        <member name="M:OpcUa_CertificateStoreConfiguration_Set(_OpcUa_CertificateStoreConfiguration*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte!System.Runtime.CompilerServices.IsConst*,=FUNC:System.UInt32!System.Runtime.CompilerServices.IsLong(System.Void*,_OpcUa_ByteString!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runti">
  @brief Sets the values in the configuration to the given parameters. Strings are copied to allow clear.

  @param pConfiguration                             [bi] Pointer to configuration object.
  @param strPkiType                                 [in] Requested PKI provider type (depends on platformlayer).
  @param strTrustedCertificateListLocation          [in] Store identifier with explicitely trusted certificates.
  @param strRevokedCertificateListLocation          [in] Store identifier with revoked certificats.
  @param strIssuerCertificateStoreLocation          [in] Store identifier with not trusted issuer certificats.
  @param strRevokedIssuerCertificateListLocation    [in] Store identifier with revoked issuer certificats.
  @param pfVerifyCallback                           [in] Callback function which is invoked during certificate validation.
  @param pvVerifyCallbackUserData                   [in] User data passed to pfVerifyCallback.
  @param uFlags                                     [in] PkiType dependent flags.
  @param pvOverride                                 [in] Custom PKI provider to use if PkiType is Override.

</member>
        <member name="M:OpcUa_CertificateStoreConfiguration_Initialize(_OpcUa_CertificateStoreConfiguration*)">
  @brief Initializes OpcUa_CertificateStoreConfiguration.

  @param pConfiguration    [in] Pointer to configuration object.

</member>
        <member name="M:OpcUa_CertificateStoreConfiguration_Create(_OpcUa_CertificateStoreConfiguration**)">
  @brief Allocates and initializes memory for OpcUa_CertificateStoreConfiguration.

  @param ppConfiguration    [out] Pointer to future configuration object.

</member>
        <member name="T:_OpcUa_CertificateStoreConfiguration">
@brief The openssl pki config.

</member>
        <member name="D:OpcUa_CertificateStoreConfiguration_VerifyCallback">
@brief The standard PKI configuration types.

</member>
        <member name="M:OpcUa_Crypto_SymmetricVerify(_OpcUa_CryptoProvider*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,_OpcUa_ByteString*)">
  @brief Generates s 20 Bytes Message Authentication Code (MAC) of the given input buffer and a secret key.

  Abstract!
  
  synchronous!

  @param pProvider                  [in]  The crypto provider handle.
  @param pData                      [in]  The data for the MAC generation.
  @param dataLen                    [in]  The length data for the MAC generation.
  @param key                        [in]  The key for the MAC generation.
  @param pSignature                 [in]  The signature (MAC).


</member>
        <member name="D:OpcUa_Crypto_PfnSymmetricVerify">
  @brief Generates s 20 Bytes Message Authentication Code (MAC) of the given input buffer and a secret key.

  Function Pointer!
  
  synchronous!

  @param pProvider                  [in]  The crypto provider handle.
  @param pData                      [in]  The data for the MAC generation.
  @param dataLen                    [in]  The length data for the MAC generation.
  @param key                        [in]  The key for the MAC generation.
  @param pSignature                 [in]  The resulting signature (MAC).


</member>
        <member name="M:OpcUa_Crypto_SymmetricSign(_OpcUa_CryptoProvider*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,_OpcUa_ByteString*)">
  @brief Generates s 20 Bytes Message Authentication Code (MAC) of the given input buffer and a secret key.

  Abstract!
  
  synchronous!

  @param pProvider        [in]  The crypto provider handle.
  @param pData            [in]  The data for the MAC generation.
  @param dataLen          [in]  The length data for the MAC generation.
  @param key              [in]  The key for the MAC generation.

  @param pSignature      [out] The resulting Signature (messsage authentication code).

</member>
        <member name="D:OpcUa_Crypto_PfnSymmetricSign">
  @brief Generates s 20 Bytes Message Authentication Code (MAC) of the given input buffer and a secret key.

  Function Pointer!
  
  synchronous!

  @param pProvider        [in]  The crypto provider handle.
  @param pData            [in]  The data for the MAC generation.
  @param dataLen          [in]  The length data for the MAC generation.
  @param key              [in]  The key for the MAC generation.

  @param pSignature       [out] The resulting signature (MAC).

</member>
        <member name="M:OpcUa_Crypto_SymmetricDecrypt(_OpcUa_CryptoProvider*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,System.Byte*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
  @brief Decrypts encrypted data using Advanced Encryption Standard (AES) with the Cipher Block Chaining (CBC) mode.
 
  Abstract!

  synchronous!

  @param pProvider              [in]  Provider handle.
  @param pCipherText            [in]  Cipher text to decrypt.
  @param cipherTextLen          [in]  The length of the cipher text.
  @param key                    [in]  The encryption/decryption key.
  @param pInitalVector          [in]  The initial vector.

  @param pPlainText             [out] The decrypted text.
  @param pPlainTextLen          [out] The length of the decrypted text

</member>
        <member name="D:OpcUa_Crypto_PfnSymmetricDecrypt">
  @brief Decrypts encrypted data using Advanced Encryption Standard (AES) with the Cipher Block Chaining (CBC) mode.
 
  Function Pointer!

  synchronous!

  @param pProvider              [in]  Provider handle.
  @param pCipherText            [in]  Cipher text to decrypt.
  @param cipherTextLen          [in]  The length of the cipher text.
  @param key                    [in]  The encryption/decryption key.
  @param pInitalVector          [in]  The initial vector.

  @param pPlainText             [out] The decrypted text.
  @param pPlainTextLen          [out] The length of the decrypted text

</member>
        <member name="M:OpcUa_Crypto_SymmetricEncrypt(_OpcUa_CryptoProvider*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,System.Byte*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
  @brief Encrypts data using Advanced Encryption Standard (AES) with the Cipher Block Chaining (CBC) mode.
 
   Abstract!

   keylen = blocksize =&gt; fixed sizes of 128 = 10 rounds, 192 = 12 rounds, 256 = 14 rounds
   message length = outputlength

  @param pProvider              [in]  Provider handle.
  @param pPlainText             [in]  Plain text to encrypt.
  @param plainTextLen           [in]  The length of the plain text.
  @param key                    [in]  The encryption/decryption key.
  @param pInitalVector          [in]  The initial vector.

  @param pCipherText            [out] The encrypted text.
  @param pCipherTextLen         [out] The length of the encrypted text

</member>
        <member name="D:OpcUa_Crypto_PfnSymmetricEncrypt">
  @brief Encrypts data using Advanced Encryption Standard (AES) with the Cipher Block Chaining (CBC) mode.
 
   Function Pointer!

   keylen = blocksize =&gt; fixed sizes of 128 = 10 rounds, 192 = 12 rounds, 256 = 14 rounds
   message length = outputlength

  @param pProvider              [in]  Provider handle.
  @param pPlainText             [in]  Plain text to encrypt.
  @param plainTextLen           [in]  The length of the plain text.
  @param key                    [in]  The encryption/decryption key.
  @param pInitalVector          [in]  The initial vector.

  @param pCipherText            [out] The encrypted text.
  @param pCipherTextLen         [out] The length of the encrypted text

</member>
        <member name="M:OpcUa_Crypto_CreateCertificate(_OpcUa_CryptoProvider*,System.Int32!System.Runtime.CompilerServices.IsLong!System.Runtime.CompilerServices.IsConst,_OpcUa_DateTime,_OpcUa_DateTime,OpcUa_Crypto_NameEntry_*,System.UInt32,OpcUa_Crypto_Key_,OpcUa_Crypto_Extension_*,System.UInt32,System.UInt32!System.Runtime.CompilerServices.IsConst,System.Void*,OpcUa_Crypto_Key_,System.Void**)">
  @brief Creates a new X509 selfsigned certificate object.
 
  Abstract!

  @param pProvider                [in]  The crypto provider handle.
  @param serialNumber             [in]  The serial number of the desired certificate (Should be read out of the cetificate store).
  @param validFrom                [in]  The validation start time information.  
  @param validTo                  [in]  The validation end time information.  
  @param pNameEntries             [in]  Name entries for the certificate.
  @param nameEntriesCount         [in]  The count of name entries located at the address in pNameEntries.
  @param pSubjectPublicKey        [in]  The subject's public key.
  @param pExtensions              [in]  The extensions for the desired certificate.
  @param extensionsCount          [in]  The count of extension at the address in pExtensions.
  @param signatureHashAlgorithm   [in]  The hash algorithm for calculating the signature.
  @param pIssuerCertificate       [in]  The certificate for the certificate authority.
  @param pIssuerPrivateKey        [in]  The private key of the certificate authority.
  
  @param ppCertificate           [out] The new self-signed certificate.

</member>
        <member name="D:OpcUa_Crypto_PfnCreateCertificate">
  @brief Creates a new X509 selfsigned certificate object.

  Function Pointer!

  @param pProvider                [in]  The crypto provider handle.
  @param serialNumber             [in]  The serial number of the desired certificate (Should be read out of the cetificate store).
  @param validFrom                [in]  The validation start time information.  
  @param validTo                  [in]  The validation end time information.  
  @param pNameEntries             [in]  Name entries for the certificate.
  @param nameEntriesCount         [in]  The count of name entries located at the address in pNameEntries.
  @param pSubjectPublicKey        [in]  The subject's public key.
  @param pExtensions              [in]  The extensions for the desired certificate.
  @param extensionsCount          [in]  The count of extension at the address in pExtensions.
  @param signatureHashAlgorithm   [in]  The hash algorithm for calculating the signature.
  @param pIssuerCertificate       [in]  The certificate for the certificate authority.
  @param pIssuerPrivateKey        [in]  The private key of the certificate authority.
  
  @param ppCertificate           [out] The new self-signed certificate.

</member>
        <member name="M:OpcUa_Crypto_GetCertificateThumbprint(_OpcUa_CryptoProvider*,_OpcUa_ByteString*,_OpcUa_ByteString*)">
  @brief Gets the private key from a given certificate.
 
  Abstract!

  @param pProvider                  [in]  A pointer to a crypto provider.
  @param pCertificate               [in]  The passed in certificate.
  
  @param pCertificateThumbprint     [out] The thumbprint of the certificate.

</member>
        <member name="D:OpcUa_Crypto_PfnGetCertificateThumbprint">
  @brief Gets the signature from a given certificate.
 
  Function Pointer!

  @param pProvider                  [in]  A pointer to a crypto provider.
  @param pCertificate               [in]  The passed in certificate.
  
  @param pCertificateThumbprint     [out] The thumbprint of the certificate.

</member>
        <member name="M:OpcUa_Crypto_GetSignatureFromCert(_OpcUa_CryptoProvider*,_OpcUa_ByteString*,OpcUa_Crypto_Signature_*)">
  @brief Gets the private key from a given certificate.
 
  Abstract!

  @param pProvider                [in]  A pointer to a crypto provider.
  @param certificate              [in]  The passed in certificate.
  
  @param pSignature               [out] The read out signature of the certificate.

</member>
        <member name="D:OpcUa_Crypto_PfnGetSignatureFromCert">
  @brief Gets the signature from a given certificate.
 
  Function Pointer!

  @param pProvider                [in]  A pointer to a crypto provider.
  @param certificate              [in]  The passed in certificate.
  
  @param pSignature               [out] The read out signature of the certificate.

</member>
        <member name="M:OpcUa_Crypto_GetPublicKeyFromCert(_OpcUa_CryptoProvider*,_OpcUa_ByteString*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,OpcUa_Crypto_Key_*)">
  @brief Gets the private key from a given certificate.
 
  Abstract!

  @param pProvider                [in]  A pointer to a crypto provider.
  @param pCertificate             [in]  A pointer to a DER encoded ByteString representation of the certificate.
  @param password                 [in]  Password for certificate. Only used when certificate is password protected. (Optional)
  
  @param pPublicKey               [out] The read out public key of the certificate.

</member>
        <member name="D:OpcUa_Crypto_PfnGetPublicKeyFromCert">
  @brief Gets the private key from a given certificate.
 
  Function Pointer!

  @param pProvider                [in]  A pointer to a crypto provider.
  @param pCertificate             [in]  A pointer to a DER encoded ByteString representation of the certificate.
  @param password                 [in]  Password for certificate. Only used when certificate is password protected. (Optional)
  
  @param pPublicKey               [out] The read out public key of the certificate.

</member>
        <member name="M:OpcUa_Crypto_GetPrivateKeyFromCert(_OpcUa_CryptoProvider*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,System.SByte!System.Runtime.CompilerServices.IsSignUnspecifiedByte*,OpcUa_Crypto_Key_*)">
  @brief Gets the public key from a given certificate.
 
  Abstract!

  @param pProvider               [in]  A pointer to a crypto provider.
  @param certificate             [in]  The passed in certificate.
  @param password                [in]  Password for certificate. Only used when certificate is password protected. (Optional)
  
  @param pPrivateKey             [out] The read out private key of the certificate.

</member>
        <member name="D:OpcUa_Crypto_PfnGetPrivateKeyFromCert">
  @brief Gets the public key from a given certificate.

  Function Pointer!

  @param pProvider               [in]  A pointer to a crypto provider.
  @param certificate             [in]  The passed in certificate.
  @param password                [in]  Password for certificate. Only used when certificate is password protected. (Optional)
  
  @param pPrivateKey             [out] The read out private key of the certificate.

</member>
        <member name="M:OpcUa_Crypto_DeriveChannelKeysets(_OpcUa_CryptoProvider*,_OpcUa_ByteString,_OpcUa_ByteString,System.Int32!System.Runtime.CompilerServices.IsLong,_OpcUa_SecurityKeyset*,_OpcUa_SecurityKeyset*)">
  @brief Derives a set of symmetric keys (encryption, signature, initialization vector) from a given input.
 
  Abstract!

  @param pCryptoProvider  [in]  The crypto provider handle.
  @param clientNonce      [in]  The client nonce.
  @param serverNonce      [in]  The server nonce.
  @param keySize          [in]  The desired length of the random keys.

  @param pClientKeyset    [out] The derived client-side keyset.
  @param pServerKeyset    [out] The derived server-side keyset.

</member>
        <member name="D:OpcUa_Crypto_PfnDeriveChannelKeysets">
  @brief Derives a set of symmetric keys (encryption, signature, initialization vector) from a given input.
 
  Abstract!

  @param pCryptoProvider  [in]  The crypto provider handle.
  @param clientNonce      [in]  The client nonce.
  @param serverNonce      [in]  The server nonce.
  @param keySize          [in]  The desired length of the random keys.

  @param pClientKeyset    [out] The derived client-side keyset.
  @param pServerKeyset    [out] The derived server-side keyset.

</member>
        <member name="M:OpcUa_Crypto_DeriveKey(_OpcUa_CryptoProvider*,_OpcUa_ByteString,_OpcUa_ByteString,System.Int32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*)">
  @brief Generates a session key using secret input data.
 
  Abstract!

  @param pProvider        [in]  The crypto provider handle.
  @param secret           [in]  The secret information to create a random key.
  @param seed             [in]  The seed to create a random key.
  @param keyLen           [in]  The desired length of the random key.

  @param pKey             [out] The derived random key.

</member>
        <member name="D:OpcUa_Crypto_PfnDeriveKey">
  @brief Generates a session key using secret input data.

  Function Pointer!

  @param pProvider        [in]  The crypto provider handle.
  @param secret           [in]  The secret information to create a random key.
  @param seed             [in]  The seed to create a random key.
  @param keyLen           [in]  The desired length of the random key.

  @param pKey             [out] The derived random key.

</member>
        <member name="M:OpcUa_Crypto_GenerateKey(_OpcUa_CryptoProvider*,System.Int32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*)">
  @brief Adds random data to the destination buffer.

  Abstract!
 
  @param pProvider        [in]  The crypto provider handle.
  @param keyLen           [in]  The desired length of the random key.
  
  @param pKey             [out] The generated random key.

</member>
        <member name="D:OpcUa_Crypto_PfnGenerateKey">
  @brief Adds random data to the destination buffer.

  Function Pointer!
 
  @param pProvider        [in]  The crypto provider handle.
  @param keyLen           [in]  The desired length of the random key.
  
  @param pKey             [out] The generated random key.

</member>
        <member name="M:OpcUa_Crypto_GetAsymmetricKeyLength(_OpcUa_CryptoProvider*,OpcUa_Crypto_Key_,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
@brief

</member>
        <member name="D:OpcUa_Crypto_PfnGetAsymmetricKeyLength">
@brief 

</member>
        <member name="M:OpcUa_Crypto_GenerateAsymmetricKeypair(_OpcUa_CryptoProvider*,System.UInt32,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,OpcUa_Crypto_Key_*)">
@brief

</member>
        <member name="D:OpcUa_Crypto_PfnGenerateAsymmetricKeypair">
@brief 

</member>
        <member name="M:OpcUa_Crypto_GetKeyLength(_OpcUa_String*,_OpcUa_ByteString*,System.UInt32!System.Runtime.CompilerServices.IsLong*)">
@brief Determins the length of the keys used in the given certificate.

</member>
        <member name="T:OpcUa_Crypto_Extension_">
@brief Extension structure for an X509 certificate. Used to add V3 extensions for a X.509 certificate.

</member>
        <member name="T:OpcUa_Crypto_NameEntry_">
@brief Name entry structure for an X509 certificate. Used to build the X.509 Subject/Issuer name.

</member>
        <member name="F:_OpcUa_SecurityKeyset.InitializationVector">
@brief The initialization vector. 
</member>
        <member name="F:_OpcUa_SecurityKeyset.EncryptionKey">
@brief The encryption key. 
</member>
        <member name="F:_OpcUa_SecurityKeyset.SigningKey">
@brief The signing key. 
</member>
        <member name="T:_OpcUa_SecurityKeyset">
@brief The SecurityKeyset.

</member>
        <member name="T:OpcUa_Crypto_Key_">
@brief The CryptoKey.

</member>
        <member name="T:OpcUa_Crypto_Signature_">
@brief The Signature.

</member>
        <member name="F:_OpcUa_TimeVal.uintMicroSeconds">
@brief The fraction of the last second. 
</member>
        <member name="F:_OpcUa_TimeVal.uintSeconds">
@brief The number of full seconds since 1970. 
</member>
        <member name="T:_OpcUa_TimeVal">
@brief Holds a time value with a maximum resolution of micro seconds.

</member>
        <member name="D:OpcUa_Timer">
@brief The handle for a timer.

</member>
        <member name="D:OpcUa_Semaphore">
@brief The handle for the semaphore.

</member>
        <member name="D:OpcUa_Mutex">
@brief The handle for the mutex.

</member>
        <member name="D:OpcUa_StatusCode">
@brief The handle for the platform thread.

</member>
        <member name="D:OpcUa_PfnInternalThreadMain">
@brief Internally used thread main entry function.

</member>
        <member name="D:OpcUa_Thread">
@brief OpcUa_Thread Type

</member>
        <member name="D:OpcUa_Socket">
@brief OpcUa_Socket Type

</member>
        <member name="D:OpcUa_SocketManager">
@brief OpcUa_SocketManager Type

</member>
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_PfnCompare'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricEncrypt'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricEncrypt(_OpcUa_CryptoProvider*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricDecrypt(_OpcUa_CryptoProvider*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricDecrypt'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricSign'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricSign(_OpcUa_CryptoProvider*,_OpcUa_ByteString,OpcUa_Crypto_Key_*,_OpcUa_ByteString*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricVerify'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricVerify(_OpcUa_CryptoProvider*,_OpcUa_ByteString,OpcUa_Crypto_Key_*,_OpcUa_ByteString*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaByteArray.op_Subscript(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_String_StrnCmp(_OpcUa_String!System.Runtime.CompilerServices.IsConst*,_OpcUa_String!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaDataTypeDictionary.definitionType(UaNodeId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaDataTypeDictionary.structureDefinition(UaNodeId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UaStatusCode'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UaNumericRange'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaUserIdentityToken.getTokenType'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaFilterOperand.getFilterOperandType'. -->
        <!-- Discarding badly formed XML document comment for member 'F:UaClientSdk.SessionConnectInfo.alternativeEndpointUrls'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_PfnCompare'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricEncrypt'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricEncrypt(_OpcUa_CryptoProvider*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricDecrypt(_OpcUa_CryptoProvider*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricDecrypt'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricSign'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricSign(_OpcUa_CryptoProvider*,_OpcUa_ByteString,OpcUa_Crypto_Key_*,_OpcUa_ByteString*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricVerify'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricVerify(_OpcUa_CryptoProvider*,_OpcUa_ByteString,OpcUa_Crypto_Key_*,_OpcUa_ByteString*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaByteArray.op_Subscript(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_String_StrnCmp(_OpcUa_String!System.Runtime.CompilerServices.IsConst*,_OpcUa_String!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaDataTypeDictionary.definitionType(UaNodeId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaDataTypeDictionary.structureDefinition(UaNodeId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UaStatusCode'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UaNumericRange'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaUserIdentityToken.getTokenType'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaFilterOperand.getFilterOperandType'. -->
        <!-- Discarding badly formed XML document comment for member 'F:UaClientSdk.SessionConnectInfo.alternativeEndpointUrls'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_PfnCompare'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricEncrypt'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricEncrypt(_OpcUa_CryptoProvider*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricDecrypt(_OpcUa_CryptoProvider*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricDecrypt'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricSign'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricSign(_OpcUa_CryptoProvider*,_OpcUa_ByteString,OpcUa_Crypto_Key_*,_OpcUa_ByteString*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricVerify'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricVerify(_OpcUa_CryptoProvider*,_OpcUa_ByteString,OpcUa_Crypto_Key_*,_OpcUa_ByteString*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaByteArray.op_Subscript(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_String_StrnCmp(_OpcUa_String!System.Runtime.CompilerServices.IsConst*,_OpcUa_String!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaDataTypeDictionary.definitionType(UaNodeId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaDataTypeDictionary.structureDefinition(UaNodeId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UaStatusCode'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UaNumericRange'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaUserIdentityToken.getTokenType'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaFilterOperand.getFilterOperandType'. -->
        <!-- Discarding badly formed XML document comment for member 'F:UaClientSdk.SessionConnectInfo.alternativeEndpointUrls'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_PfnCompare'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricEncrypt'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricEncrypt(_OpcUa_CryptoProvider*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricDecrypt(_OpcUa_CryptoProvider*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricDecrypt'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricSign'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricSign(_OpcUa_CryptoProvider*,_OpcUa_ByteString,OpcUa_Crypto_Key_*,_OpcUa_ByteString*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricVerify'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricVerify(_OpcUa_CryptoProvider*,_OpcUa_ByteString,OpcUa_Crypto_Key_*,_OpcUa_ByteString*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaByteArray.op_Subscript(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_String_StrnCmp(_OpcUa_String!System.Runtime.CompilerServices.IsConst*,_OpcUa_String!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaDataTypeDictionary.definitionType(UaNodeId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaDataTypeDictionary.structureDefinition(UaNodeId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UaStatusCode'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UaNumericRange'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaUserIdentityToken.getTokenType'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaFilterOperand.getFilterOperandType'. -->
        <!-- Discarding badly formed XML document comment for member 'F:UaClientSdk.SessionConnectInfo.alternativeEndpointUrls'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UaPkiCertificate'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_PfnCompare'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricEncrypt'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricEncrypt(_OpcUa_CryptoProvider*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricDecrypt(_OpcUa_CryptoProvider*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricDecrypt'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricSign'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricSign(_OpcUa_CryptoProvider*,_OpcUa_ByteString,OpcUa_Crypto_Key_*,_OpcUa_ByteString*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricVerify'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricVerify(_OpcUa_CryptoProvider*,_OpcUa_ByteString,OpcUa_Crypto_Key_*,_OpcUa_ByteString*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaByteArray.op_Subscript(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_String_StrnCmp(_OpcUa_String!System.Runtime.CompilerServices.IsConst*,_OpcUa_String!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaDataTypeDictionary.definitionType(UaNodeId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaDataTypeDictionary.structureDefinition(UaNodeId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UaStatusCode'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UaNumericRange'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaUserIdentityToken.getTokenType'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaFilterOperand.getFilterOperandType'. -->
        <!-- Discarding badly formed XML document comment for member 'F:UaClientSdk.SessionConnectInfo.alternativeEndpointUrls'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_PfnCompare'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricEncrypt'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricEncrypt(_OpcUa_CryptoProvider*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricDecrypt(_OpcUa_CryptoProvider*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricDecrypt'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricSign'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricSign(_OpcUa_CryptoProvider*,_OpcUa_ByteString,OpcUa_Crypto_Key_*,_OpcUa_ByteString*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricVerify'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricVerify(_OpcUa_CryptoProvider*,_OpcUa_ByteString,OpcUa_Crypto_Key_*,_OpcUa_ByteString*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaByteArray.op_Subscript(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_String_StrnCmp(_OpcUa_String!System.Runtime.CompilerServices.IsConst*,_OpcUa_String!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaDataTypeDictionary.definitionType(UaNodeId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaDataTypeDictionary.structureDefinition(UaNodeId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UaStatusCode'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UaNumericRange'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaUserIdentityToken.getTokenType'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaFilterOperand.getFilterOperandType'. -->
        <!-- Discarding badly formed XML document comment for member 'F:UaClientSdk.SessionConnectInfo.alternativeEndpointUrls'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_PfnCompare'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricEncrypt'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricEncrypt(_OpcUa_CryptoProvider*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricDecrypt(_OpcUa_CryptoProvider*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricDecrypt'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricSign'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricSign(_OpcUa_CryptoProvider*,_OpcUa_ByteString,OpcUa_Crypto_Key_*,_OpcUa_ByteString*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricVerify'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricVerify(_OpcUa_CryptoProvider*,_OpcUa_ByteString,OpcUa_Crypto_Key_*,_OpcUa_ByteString*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaByteArray.op_Subscript(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_String_StrnCmp(_OpcUa_String!System.Runtime.CompilerServices.IsConst*,_OpcUa_String!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaDataTypeDictionary.definitionType(UaNodeId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaDataTypeDictionary.structureDefinition(UaNodeId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UaStatusCode'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UaNumericRange'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaUserIdentityToken.getTokenType'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaFilterOperand.getFilterOperandType'. -->
        <!-- Discarding badly formed XML document comment for member 'F:UaClientSdk.SessionConnectInfo.alternativeEndpointUrls'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_PfnCompare'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricEncrypt'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricEncrypt(_OpcUa_CryptoProvider*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricDecrypt(_OpcUa_CryptoProvider*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricDecrypt'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricSign'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricSign(_OpcUa_CryptoProvider*,_OpcUa_ByteString,OpcUa_Crypto_Key_*,_OpcUa_ByteString*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricVerify'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricVerify(_OpcUa_CryptoProvider*,_OpcUa_ByteString,OpcUa_Crypto_Key_*,_OpcUa_ByteString*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaByteArray.op_Subscript(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_String_StrnCmp(_OpcUa_String!System.Runtime.CompilerServices.IsConst*,_OpcUa_String!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaDataTypeDictionary.definitionType(UaNodeId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaDataTypeDictionary.structureDefinition(UaNodeId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UaStatusCode'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UaNumericRange'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaUserIdentityToken.getTokenType'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaFilterOperand.getFilterOperandType'. -->
        <!-- Discarding badly formed XML document comment for member 'F:UaClientSdk.SessionConnectInfo.alternativeEndpointUrls'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_PfnCompare'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricEncrypt'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricEncrypt(_OpcUa_CryptoProvider*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricDecrypt(_OpcUa_CryptoProvider*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricDecrypt'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricSign'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricSign(_OpcUa_CryptoProvider*,_OpcUa_ByteString,OpcUa_Crypto_Key_*,_OpcUa_ByteString*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricVerify'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricVerify(_OpcUa_CryptoProvider*,_OpcUa_ByteString,OpcUa_Crypto_Key_*,_OpcUa_ByteString*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaByteArray.op_Subscript(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_String_StrnCmp(_OpcUa_String!System.Runtime.CompilerServices.IsConst*,_OpcUa_String!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaDataTypeDictionary.definitionType(UaNodeId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaDataTypeDictionary.structureDefinition(UaNodeId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UaStatusCode'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UaNumericRange'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaUserIdentityToken.getTokenType'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaFilterOperand.getFilterOperandType'. -->
        <!-- Discarding badly formed XML document comment for member 'F:UaClientSdk.SessionConnectInfo.alternativeEndpointUrls'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_PfnCompare'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricEncrypt'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricEncrypt(_OpcUa_CryptoProvider*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricDecrypt(_OpcUa_CryptoProvider*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong,OpcUa_Crypto_Key_*,System.Byte*,System.UInt32!System.Runtime.CompilerServices.IsLong*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricDecrypt'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricSign'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricSign(_OpcUa_CryptoProvider*,_OpcUa_ByteString,OpcUa_Crypto_Key_*,_OpcUa_ByteString*)'. -->
        <!-- Discarding badly formed XML document comment for member 'D:OpcUa_Crypto_PfnAsymmetricVerify'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_Crypto_AsymmetricVerify(_OpcUa_CryptoProvider*,_OpcUa_ByteString,OpcUa_Crypto_Key_*,_OpcUa_ByteString*)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaByteArray.op_Subscript(System.Int32)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:OpcUa_String_StrnCmp(_OpcUa_String!System.Runtime.CompilerServices.IsConst*,_OpcUa_String!System.Runtime.CompilerServices.IsConst*,System.UInt32!System.Runtime.CompilerServices.IsLong,System.Byte)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaDataTypeDictionary.definitionType(UaNodeId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaDataTypeDictionary.structureDefinition(UaNodeId!System.Runtime.CompilerServices.IsConst*!System.Runtime.CompilerServices.IsImplicitlyDereferenced)'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UaStatusCode'. -->
        <!-- Discarding badly formed XML document comment for member 'T:UaNumericRange'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaUserIdentityToken.getTokenType'. -->
        <!-- Discarding badly formed XML document comment for member 'M:UaFilterOperand.getFilterOperandType'. -->
        <!-- Discarding badly formed XML document comment for member 'F:UaClientSdk.SessionConnectInfo.alternativeEndpointUrls'. -->
    </members>
</doc>